Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROPHE
    CASE
    COMMENT
    CONST
    FILE
    GOTO
    LABEL
    NIL
    PACKED
    PROCEDURE
    READ
    RECORD
    REPEAT
    SET
    TYPE
    UNTIL
    WITH
    WRITE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON block PERIOD
Rule 2     block -> declarations compound_statement
Rule 3     declarations -> VAR var_declarations
Rule 4     declarations -> function_declaration
Rule 5     declarations -> empty
Rule 6     function_block -> VAR var_declarations compound_statement
Rule 7     function_block -> compound_statement
Rule 8     declaration -> VAR var_declarations
Rule 9     declaration -> function_declaration
Rule 10    var_declarations -> var_declarations var_declaration
Rule 11    var_declarations -> var_declaration
Rule 12    var_declaration -> id_list COLON type_spec SEMICOLON
Rule 13    id_list -> id_list COMMA ID
Rule 14    id_list -> ID
Rule 15    type_spec -> INTEGER_TYPE
Rule 16    type_spec -> REAL_TYPE
Rule 17    type_spec -> BOOLEAN
Rule 18    type_spec -> STRING_TYPE
Rule 19    type_spec -> CHAR_TYPE
Rule 20    type_spec -> array_type
Rule 21    array_type -> ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_spec
Rule 22    compound_statement -> BEGIN statement_list END
Rule 23    statement_list -> statement_list SEMICOLON statement
Rule 24    statement_list -> statement
Rule 25    statement -> compound_statement
Rule 26    statement -> assignment_statement
Rule 27    statement -> if_statement
Rule 28    statement -> while_statement
Rule 29    statement -> for_statement
Rule 30    statement -> procedure_call_statement
Rule 31    statement -> halt_statement
Rule 32    statement -> empty
Rule 33    assignment_statement -> variable ASSIGN expression
Rule 34    variable -> ID
Rule 35    variable -> ID LBRACKET expression RBRACKET
Rule 36    halt_statement -> HALT SEMICOLON
Rule 37    if_statement -> IF expression THEN statement
Rule 38    if_statement -> IF expression THEN statement ELSE statement
Rule 39    while_statement -> WHILE expression DO statement
Rule 40    for_statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 41    for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement
Rule 42    procedure_call_statement -> ID LPAREN expression_list RPAREN
Rule 43    procedure_call_statement -> ID LPAREN RPAREN
Rule 44    procedure_call_statement -> WRITELN LPAREN expression_list RPAREN
Rule 45    procedure_call_statement -> WRITELN LPAREN RPAREN
Rule 46    procedure_call_statement -> READLN LPAREN variable RPAREN
Rule 47    procedure_call_statement -> READLN LPAREN RPAREN
Rule 48    expression_list -> expression_list COMMA expression
Rule 49    expression_list -> expression
Rule 50    expression -> simple_expression
Rule 51    expression -> simple_expression relop simple_expression
Rule 52    relop -> EQ
Rule 53    relop -> NEQ
Rule 54    relop -> LT
Rule 55    relop -> LE
Rule 56    relop -> GT
Rule 57    relop -> GE
Rule 58    relop -> IN
Rule 59    simple_expression -> term
Rule 60    simple_expression -> simple_expression addop term
Rule 61    addop -> PLUS
Rule 62    addop -> MINUS
Rule 63    addop -> OR
Rule 64    term -> factor
Rule 65    term -> term mulop factor
Rule 66    mulop -> TIMES
Rule 67    mulop -> DIVIDE
Rule 68    mulop -> DIV
Rule 69    mulop -> MOD
Rule 70    mulop -> AND
Rule 71    factor -> variable
Rule 72    factor -> INTEGER
Rule 73    factor -> REAL
Rule 74    factor -> STRING
Rule 75    factor -> TRUE
Rule 76    factor -> FALSE
Rule 77    factor -> LPAREN expression RPAREN
Rule 78    factor -> NOT factor
Rule 79    factor -> function_call
Rule 80    function_call -> ID LPAREN expression_list RPAREN
Rule 81    function_call -> ID LPAREN RPAREN
Rule 82    function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type_spec SEMICOLON function_block SEMICOLON
Rule 83    param_list -> param_list SEMICOLON param
Rule 84    param_list -> param
Rule 85    param -> id_list COLON type_spec
Rule 86    empty -> <empty>

Terminals, with rules where they appear

AND                  : 70
APOSTROPHE           : 
ARRAY                : 21
ASSIGN               : 33 40 41
BEGIN                : 22
BOOLEAN              : 17
CASE                 : 
CHAR_TYPE            : 19
COLON                : 12 82 85
COMMA                : 13 48
COMMENT              : 
CONST                : 
DIV                  : 68
DIVIDE               : 67
DO                   : 39 40 41
DOWNTO               : 41
ELSE                 : 38
END                  : 22
EQ                   : 52
FALSE                : 76
FILE                 : 
FOR                  : 40 41
FUNCTION             : 82
GE                   : 57
GOTO                 : 
GT                   : 56
HALT                 : 36
ID                   : 1 13 14 34 35 40 41 42 43 80 81 82
IF                   : 37 38
IN                   : 58
INTEGER              : 21 21 72
INTEGER_TYPE         : 15
LABEL                : 
LBRACKET             : 21 35
LE                   : 55
LPAREN               : 42 43 44 45 46 47 77 80 81 82
LT                   : 54
MINUS                : 62
MOD                  : 69
NEQ                  : 53
NIL                  : 
NOT                  : 78
OF                   : 21
OR                   : 63
PACKED               : 
PERIOD               : 1 21 21
PLUS                 : 61
PROCEDURE            : 
PROGRAM              : 1
RBRACKET             : 21 35
READ                 : 
READLN               : 46 47
REAL                 : 73
REAL_TYPE            : 16
RECORD               : 
REPEAT               : 
RPAREN               : 42 43 44 45 46 47 77 80 81 82
SEMICOLON            : 1 12 23 36 82 82 83
SET                  : 
STRING               : 74
STRING_TYPE          : 18
THEN                 : 37 38
TIMES                : 66
TO                   : 40
TRUE                 : 75
TYPE                 : 
UNTIL                : 
VAR                  : 3 6 8
WHILE                : 39
WITH                 : 
WRITE                : 
WRITELN              : 44 45
error                : 

Nonterminals, with rules where they appear

addop                : 60
array_type           : 20
assignment_statement : 26
block                : 1
compound_statement   : 2 6 7 25
declaration          : 
declarations         : 2
empty                : 5 32
expression           : 33 35 37 38 39 40 40 41 41 48 49 77
expression_list      : 42 44 48 80
factor               : 64 65 78
for_statement        : 29
function_block       : 82
function_call        : 79
function_declaration : 4 9
halt_statement       : 31
id_list              : 12 13 85
if_statement         : 27
mulop                : 65
param                : 83 84
param_list           : 82 83
procedure_call_statement : 30
program              : 0
relop                : 51
simple_expression    : 50 51 51 60
statement            : 23 24 37 38 38 39 40 41
statement_list       : 22 23
term                 : 59 60 65
type_spec            : 12 21 82 85
var_declaration      : 10 11
var_declarations     : 3 6 8 10
variable             : 33 46 71
while_statement      : 28

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON block PERIOD

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON block PERIOD

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON block PERIOD

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . block PERIOD
    (2) block -> . declarations compound_statement
    (3) declarations -> . VAR var_declarations
    (4) declarations -> . function_declaration
    (5) declarations -> . empty
    (82) function_declaration -> . FUNCTION ID LPAREN param_list RPAREN COLON type_spec SEMICOLON function_block SEMICOLON
    (86) empty -> .

    VAR             shift and go to state 7
    FUNCTION        shift and go to state 10
    BEGIN           reduce using rule 86 (empty -> .)

    block                          shift and go to state 5
    declarations                   shift and go to state 6
    function_declaration           shift and go to state 8
    empty                          shift and go to state 9

state 5

    (1) program -> PROGRAM ID SEMICOLON block . PERIOD

    PERIOD          shift and go to state 11


state 6

    (2) block -> declarations . compound_statement
    (22) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 13

    compound_statement             shift and go to state 12

state 7

    (3) declarations -> VAR . var_declarations
    (10) var_declarations -> . var_declarations var_declaration
    (11) var_declarations -> . var_declaration
    (12) var_declaration -> . id_list COLON type_spec SEMICOLON
    (13) id_list -> . id_list COMMA ID
    (14) id_list -> . ID

    ID              shift and go to state 17

    var_declarations               shift and go to state 14
    var_declaration                shift and go to state 15
    id_list                        shift and go to state 16

state 8

    (4) declarations -> function_declaration .

    BEGIN           reduce using rule 4 (declarations -> function_declaration .)


state 9

    (5) declarations -> empty .

    BEGIN           reduce using rule 5 (declarations -> empty .)


state 10

    (82) function_declaration -> FUNCTION . ID LPAREN param_list RPAREN COLON type_spec SEMICOLON function_block SEMICOLON

    ID              shift and go to state 18


state 11

    (1) program -> PROGRAM ID SEMICOLON block PERIOD .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON block PERIOD .)


state 12

    (2) block -> declarations compound_statement .

    PERIOD          reduce using rule 2 (block -> declarations compound_statement .)


state 13

    (22) compound_statement -> BEGIN . statement_list END
    (23) statement_list -> . statement_list SEMICOLON statement
    (24) statement_list -> . statement
    (25) statement -> . compound_statement
    (26) statement -> . assignment_statement
    (27) statement -> . if_statement
    (28) statement -> . while_statement
    (29) statement -> . for_statement
    (30) statement -> . procedure_call_statement
    (31) statement -> . halt_statement
    (32) statement -> . empty
    (22) compound_statement -> . BEGIN statement_list END
    (33) assignment_statement -> . variable ASSIGN expression
    (37) if_statement -> . IF expression THEN statement
    (38) if_statement -> . IF expression THEN statement ELSE statement
    (39) while_statement -> . WHILE expression DO statement
    (40) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (41) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (42) procedure_call_statement -> . ID LPAREN expression_list RPAREN
    (43) procedure_call_statement -> . ID LPAREN RPAREN
    (44) procedure_call_statement -> . WRITELN LPAREN expression_list RPAREN
    (45) procedure_call_statement -> . WRITELN LPAREN RPAREN
    (46) procedure_call_statement -> . READLN LPAREN variable RPAREN
    (47) procedure_call_statement -> . READLN LPAREN RPAREN
    (36) halt_statement -> . HALT SEMICOLON
    (86) empty -> .
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 13
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    ID              shift and go to state 33
    WRITELN         shift and go to state 34
    READLN          shift and go to state 35
    HALT            shift and go to state 36
    END             reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)

    statement_list                 shift and go to state 19
    statement                      shift and go to state 20
    compound_statement             shift and go to state 21
    assignment_statement           shift and go to state 22
    if_statement                   shift and go to state 23
    while_statement                shift and go to state 24
    for_statement                  shift and go to state 25
    procedure_call_statement       shift and go to state 26
    halt_statement                 shift and go to state 27
    empty                          shift and go to state 28
    variable                       shift and go to state 29

state 14

    (3) declarations -> VAR var_declarations .
    (10) var_declarations -> var_declarations . var_declaration
    (12) var_declaration -> . id_list COLON type_spec SEMICOLON
    (13) id_list -> . id_list COMMA ID
    (14) id_list -> . ID

    BEGIN           reduce using rule 3 (declarations -> VAR var_declarations .)
    ID              shift and go to state 17

    var_declaration                shift and go to state 37
    id_list                        shift and go to state 16

state 15

    (11) var_declarations -> var_declaration .

    ID              reduce using rule 11 (var_declarations -> var_declaration .)
    BEGIN           reduce using rule 11 (var_declarations -> var_declaration .)


state 16

    (12) var_declaration -> id_list . COLON type_spec SEMICOLON
    (13) id_list -> id_list . COMMA ID

    COLON           shift and go to state 38
    COMMA           shift and go to state 39


state 17

    (14) id_list -> ID .

    COLON           reduce using rule 14 (id_list -> ID .)
    COMMA           reduce using rule 14 (id_list -> ID .)


state 18

    (82) function_declaration -> FUNCTION ID . LPAREN param_list RPAREN COLON type_spec SEMICOLON function_block SEMICOLON

    LPAREN          shift and go to state 40


state 19

    (22) compound_statement -> BEGIN statement_list . END
    (23) statement_list -> statement_list . SEMICOLON statement

    END             shift and go to state 41
    SEMICOLON       shift and go to state 42


state 20

    (24) statement_list -> statement .

    END             reduce using rule 24 (statement_list -> statement .)
    SEMICOLON       reduce using rule 24 (statement_list -> statement .)


state 21

    (25) statement -> compound_statement .

    END             reduce using rule 25 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 25 (statement -> compound_statement .)
    ELSE            reduce using rule 25 (statement -> compound_statement .)


state 22

    (26) statement -> assignment_statement .

    END             reduce using rule 26 (statement -> assignment_statement .)
    SEMICOLON       reduce using rule 26 (statement -> assignment_statement .)
    ELSE            reduce using rule 26 (statement -> assignment_statement .)


state 23

    (27) statement -> if_statement .

    END             reduce using rule 27 (statement -> if_statement .)
    SEMICOLON       reduce using rule 27 (statement -> if_statement .)
    ELSE            reduce using rule 27 (statement -> if_statement .)


state 24

    (28) statement -> while_statement .

    END             reduce using rule 28 (statement -> while_statement .)
    SEMICOLON       reduce using rule 28 (statement -> while_statement .)
    ELSE            reduce using rule 28 (statement -> while_statement .)


state 25

    (29) statement -> for_statement .

    END             reduce using rule 29 (statement -> for_statement .)
    SEMICOLON       reduce using rule 29 (statement -> for_statement .)
    ELSE            reduce using rule 29 (statement -> for_statement .)


state 26

    (30) statement -> procedure_call_statement .

    END             reduce using rule 30 (statement -> procedure_call_statement .)
    SEMICOLON       reduce using rule 30 (statement -> procedure_call_statement .)
    ELSE            reduce using rule 30 (statement -> procedure_call_statement .)


state 27

    (31) statement -> halt_statement .

    END             reduce using rule 31 (statement -> halt_statement .)
    SEMICOLON       reduce using rule 31 (statement -> halt_statement .)
    ELSE            reduce using rule 31 (statement -> halt_statement .)


state 28

    (32) statement -> empty .

    END             reduce using rule 32 (statement -> empty .)
    SEMICOLON       reduce using rule 32 (statement -> empty .)
    ELSE            reduce using rule 32 (statement -> empty .)


state 29

    (33) assignment_statement -> variable . ASSIGN expression

    ASSIGN          shift and go to state 43


state 30

    (37) if_statement -> IF . expression THEN statement
    (38) if_statement -> IF . expression THEN statement ELSE statement
    (50) expression -> . simple_expression
    (51) expression -> . simple_expression relop simple_expression
    (59) simple_expression -> . term
    (60) simple_expression -> . simple_expression addop term
    (64) term -> . factor
    (65) term -> . term mulop factor
    (71) factor -> . variable
    (72) factor -> . INTEGER
    (73) factor -> . REAL
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . function_call
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET
    (80) function_call -> . ID LPAREN expression_list RPAREN
    (81) function_call -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 49
    REAL            shift and go to state 50
    STRING          shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LPAREN          shift and go to state 54
    NOT             shift and go to state 55
    ID              shift and go to state 57

    expression                     shift and go to state 44
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 48
    function_call                  shift and go to state 56

state 31

    (39) while_statement -> WHILE . expression DO statement
    (50) expression -> . simple_expression
    (51) expression -> . simple_expression relop simple_expression
    (59) simple_expression -> . term
    (60) simple_expression -> . simple_expression addop term
    (64) term -> . factor
    (65) term -> . term mulop factor
    (71) factor -> . variable
    (72) factor -> . INTEGER
    (73) factor -> . REAL
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . function_call
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET
    (80) function_call -> . ID LPAREN expression_list RPAREN
    (81) function_call -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 49
    REAL            shift and go to state 50
    STRING          shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LPAREN          shift and go to state 54
    NOT             shift and go to state 55
    ID              shift and go to state 57

    expression                     shift and go to state 58
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 48
    function_call                  shift and go to state 56

state 32

    (40) for_statement -> FOR . ID ASSIGN expression TO expression DO statement
    (41) for_statement -> FOR . ID ASSIGN expression DOWNTO expression DO statement

    ID              shift and go to state 59


state 33

    (42) procedure_call_statement -> ID . LPAREN expression_list RPAREN
    (43) procedure_call_statement -> ID . LPAREN RPAREN
    (34) variable -> ID .
    (35) variable -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 60
    ASSIGN          reduce using rule 34 (variable -> ID .)
    LBRACKET        shift and go to state 61


state 34

    (44) procedure_call_statement -> WRITELN . LPAREN expression_list RPAREN
    (45) procedure_call_statement -> WRITELN . LPAREN RPAREN

    LPAREN          shift and go to state 62


state 35

    (46) procedure_call_statement -> READLN . LPAREN variable RPAREN
    (47) procedure_call_statement -> READLN . LPAREN RPAREN

    LPAREN          shift and go to state 63


state 36

    (36) halt_statement -> HALT . SEMICOLON

    SEMICOLON       shift and go to state 64


state 37

    (10) var_declarations -> var_declarations var_declaration .

    ID              reduce using rule 10 (var_declarations -> var_declarations var_declaration .)
    BEGIN           reduce using rule 10 (var_declarations -> var_declarations var_declaration .)


state 38

    (12) var_declaration -> id_list COLON . type_spec SEMICOLON
    (15) type_spec -> . INTEGER_TYPE
    (16) type_spec -> . REAL_TYPE
    (17) type_spec -> . BOOLEAN
    (18) type_spec -> . STRING_TYPE
    (19) type_spec -> . CHAR_TYPE
    (20) type_spec -> . array_type
    (21) array_type -> . ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_spec

    INTEGER_TYPE    shift and go to state 66
    REAL_TYPE       shift and go to state 67
    BOOLEAN         shift and go to state 68
    STRING_TYPE     shift and go to state 69
    CHAR_TYPE       shift and go to state 70
    ARRAY           shift and go to state 72

    type_spec                      shift and go to state 65
    array_type                     shift and go to state 71

state 39

    (13) id_list -> id_list COMMA . ID

    ID              shift and go to state 73


state 40

    (82) function_declaration -> FUNCTION ID LPAREN . param_list RPAREN COLON type_spec SEMICOLON function_block SEMICOLON
    (83) param_list -> . param_list SEMICOLON param
    (84) param_list -> . param
    (85) param -> . id_list COLON type_spec
    (13) id_list -> . id_list COMMA ID
    (14) id_list -> . ID

    ID              shift and go to state 17

    param_list                     shift and go to state 74
    param                          shift and go to state 75
    id_list                        shift and go to state 76

state 41

    (22) compound_statement -> BEGIN statement_list END .

    PERIOD          reduce using rule 22 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 22 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 22 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 22 (compound_statement -> BEGIN statement_list END .)


state 42

    (23) statement_list -> statement_list SEMICOLON . statement
    (25) statement -> . compound_statement
    (26) statement -> . assignment_statement
    (27) statement -> . if_statement
    (28) statement -> . while_statement
    (29) statement -> . for_statement
    (30) statement -> . procedure_call_statement
    (31) statement -> . halt_statement
    (32) statement -> . empty
    (22) compound_statement -> . BEGIN statement_list END
    (33) assignment_statement -> . variable ASSIGN expression
    (37) if_statement -> . IF expression THEN statement
    (38) if_statement -> . IF expression THEN statement ELSE statement
    (39) while_statement -> . WHILE expression DO statement
    (40) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (41) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (42) procedure_call_statement -> . ID LPAREN expression_list RPAREN
    (43) procedure_call_statement -> . ID LPAREN RPAREN
    (44) procedure_call_statement -> . WRITELN LPAREN expression_list RPAREN
    (45) procedure_call_statement -> . WRITELN LPAREN RPAREN
    (46) procedure_call_statement -> . READLN LPAREN variable RPAREN
    (47) procedure_call_statement -> . READLN LPAREN RPAREN
    (36) halt_statement -> . HALT SEMICOLON
    (86) empty -> .
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 13
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    ID              shift and go to state 33
    WRITELN         shift and go to state 34
    READLN          shift and go to state 35
    HALT            shift and go to state 36
    END             reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)

    statement                      shift and go to state 77
    compound_statement             shift and go to state 21
    assignment_statement           shift and go to state 22
    if_statement                   shift and go to state 23
    while_statement                shift and go to state 24
    for_statement                  shift and go to state 25
    procedure_call_statement       shift and go to state 26
    halt_statement                 shift and go to state 27
    empty                          shift and go to state 28
    variable                       shift and go to state 29

state 43

    (33) assignment_statement -> variable ASSIGN . expression
    (50) expression -> . simple_expression
    (51) expression -> . simple_expression relop simple_expression
    (59) simple_expression -> . term
    (60) simple_expression -> . simple_expression addop term
    (64) term -> . factor
    (65) term -> . term mulop factor
    (71) factor -> . variable
    (72) factor -> . INTEGER
    (73) factor -> . REAL
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . function_call
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET
    (80) function_call -> . ID LPAREN expression_list RPAREN
    (81) function_call -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 49
    REAL            shift and go to state 50
    STRING          shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LPAREN          shift and go to state 54
    NOT             shift and go to state 55
    ID              shift and go to state 57

    variable                       shift and go to state 48
    expression                     shift and go to state 78
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47
    function_call                  shift and go to state 56

state 44

    (37) if_statement -> IF expression . THEN statement
    (38) if_statement -> IF expression . THEN statement ELSE statement

    THEN            shift and go to state 79


state 45

    (50) expression -> simple_expression .
    (51) expression -> simple_expression . relop simple_expression
    (60) simple_expression -> simple_expression . addop term
    (52) relop -> . EQ
    (53) relop -> . NEQ
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . GT
    (57) relop -> . GE
    (58) relop -> . IN
    (61) addop -> . PLUS
    (62) addop -> . MINUS
    (63) addop -> . OR

    THEN            reduce using rule 50 (expression -> simple_expression .)
    DO              reduce using rule 50 (expression -> simple_expression .)
    END             reduce using rule 50 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 50 (expression -> simple_expression .)
    ELSE            reduce using rule 50 (expression -> simple_expression .)
    RPAREN          reduce using rule 50 (expression -> simple_expression .)
    COMMA           reduce using rule 50 (expression -> simple_expression .)
    RBRACKET        reduce using rule 50 (expression -> simple_expression .)
    TO              reduce using rule 50 (expression -> simple_expression .)
    DOWNTO          reduce using rule 50 (expression -> simple_expression .)
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    IN              shift and go to state 88
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    OR              shift and go to state 91

    relop                          shift and go to state 80
    addop                          shift and go to state 81

state 46

    (59) simple_expression -> term .
    (65) term -> term . mulop factor
    (66) mulop -> . TIMES
    (67) mulop -> . DIVIDE
    (68) mulop -> . DIV
    (69) mulop -> . MOD
    (70) mulop -> . AND

    EQ              reduce using rule 59 (simple_expression -> term .)
    NEQ             reduce using rule 59 (simple_expression -> term .)
    LT              reduce using rule 59 (simple_expression -> term .)
    LE              reduce using rule 59 (simple_expression -> term .)
    GT              reduce using rule 59 (simple_expression -> term .)
    GE              reduce using rule 59 (simple_expression -> term .)
    IN              reduce using rule 59 (simple_expression -> term .)
    PLUS            reduce using rule 59 (simple_expression -> term .)
    MINUS           reduce using rule 59 (simple_expression -> term .)
    OR              reduce using rule 59 (simple_expression -> term .)
    THEN            reduce using rule 59 (simple_expression -> term .)
    DO              reduce using rule 59 (simple_expression -> term .)
    END             reduce using rule 59 (simple_expression -> term .)
    SEMICOLON       reduce using rule 59 (simple_expression -> term .)
    ELSE            reduce using rule 59 (simple_expression -> term .)
    RPAREN          reduce using rule 59 (simple_expression -> term .)
    COMMA           reduce using rule 59 (simple_expression -> term .)
    RBRACKET        reduce using rule 59 (simple_expression -> term .)
    TO              reduce using rule 59 (simple_expression -> term .)
    DOWNTO          reduce using rule 59 (simple_expression -> term .)
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94
    DIV             shift and go to state 95
    MOD             shift and go to state 96
    AND             shift and go to state 97

    mulop                          shift and go to state 92

state 47

    (64) term -> factor .

    TIMES           reduce using rule 64 (term -> factor .)
    DIVIDE          reduce using rule 64 (term -> factor .)
    DIV             reduce using rule 64 (term -> factor .)
    MOD             reduce using rule 64 (term -> factor .)
    AND             reduce using rule 64 (term -> factor .)
    EQ              reduce using rule 64 (term -> factor .)
    NEQ             reduce using rule 64 (term -> factor .)
    LT              reduce using rule 64 (term -> factor .)
    LE              reduce using rule 64 (term -> factor .)
    GT              reduce using rule 64 (term -> factor .)
    GE              reduce using rule 64 (term -> factor .)
    IN              reduce using rule 64 (term -> factor .)
    PLUS            reduce using rule 64 (term -> factor .)
    MINUS           reduce using rule 64 (term -> factor .)
    OR              reduce using rule 64 (term -> factor .)
    THEN            reduce using rule 64 (term -> factor .)
    DO              reduce using rule 64 (term -> factor .)
    END             reduce using rule 64 (term -> factor .)
    SEMICOLON       reduce using rule 64 (term -> factor .)
    ELSE            reduce using rule 64 (term -> factor .)
    RPAREN          reduce using rule 64 (term -> factor .)
    COMMA           reduce using rule 64 (term -> factor .)
    RBRACKET        reduce using rule 64 (term -> factor .)
    TO              reduce using rule 64 (term -> factor .)
    DOWNTO          reduce using rule 64 (term -> factor .)


state 48

    (71) factor -> variable .

    TIMES           reduce using rule 71 (factor -> variable .)
    DIVIDE          reduce using rule 71 (factor -> variable .)
    DIV             reduce using rule 71 (factor -> variable .)
    MOD             reduce using rule 71 (factor -> variable .)
    AND             reduce using rule 71 (factor -> variable .)
    EQ              reduce using rule 71 (factor -> variable .)
    NEQ             reduce using rule 71 (factor -> variable .)
    LT              reduce using rule 71 (factor -> variable .)
    LE              reduce using rule 71 (factor -> variable .)
    GT              reduce using rule 71 (factor -> variable .)
    GE              reduce using rule 71 (factor -> variable .)
    IN              reduce using rule 71 (factor -> variable .)
    PLUS            reduce using rule 71 (factor -> variable .)
    MINUS           reduce using rule 71 (factor -> variable .)
    OR              reduce using rule 71 (factor -> variable .)
    THEN            reduce using rule 71 (factor -> variable .)
    DO              reduce using rule 71 (factor -> variable .)
    END             reduce using rule 71 (factor -> variable .)
    SEMICOLON       reduce using rule 71 (factor -> variable .)
    ELSE            reduce using rule 71 (factor -> variable .)
    RPAREN          reduce using rule 71 (factor -> variable .)
    COMMA           reduce using rule 71 (factor -> variable .)
    RBRACKET        reduce using rule 71 (factor -> variable .)
    TO              reduce using rule 71 (factor -> variable .)
    DOWNTO          reduce using rule 71 (factor -> variable .)


state 49

    (72) factor -> INTEGER .

    TIMES           reduce using rule 72 (factor -> INTEGER .)
    DIVIDE          reduce using rule 72 (factor -> INTEGER .)
    DIV             reduce using rule 72 (factor -> INTEGER .)
    MOD             reduce using rule 72 (factor -> INTEGER .)
    AND             reduce using rule 72 (factor -> INTEGER .)
    EQ              reduce using rule 72 (factor -> INTEGER .)
    NEQ             reduce using rule 72 (factor -> INTEGER .)
    LT              reduce using rule 72 (factor -> INTEGER .)
    LE              reduce using rule 72 (factor -> INTEGER .)
    GT              reduce using rule 72 (factor -> INTEGER .)
    GE              reduce using rule 72 (factor -> INTEGER .)
    IN              reduce using rule 72 (factor -> INTEGER .)
    PLUS            reduce using rule 72 (factor -> INTEGER .)
    MINUS           reduce using rule 72 (factor -> INTEGER .)
    OR              reduce using rule 72 (factor -> INTEGER .)
    THEN            reduce using rule 72 (factor -> INTEGER .)
    DO              reduce using rule 72 (factor -> INTEGER .)
    END             reduce using rule 72 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 72 (factor -> INTEGER .)
    ELSE            reduce using rule 72 (factor -> INTEGER .)
    RPAREN          reduce using rule 72 (factor -> INTEGER .)
    COMMA           reduce using rule 72 (factor -> INTEGER .)
    RBRACKET        reduce using rule 72 (factor -> INTEGER .)
    TO              reduce using rule 72 (factor -> INTEGER .)
    DOWNTO          reduce using rule 72 (factor -> INTEGER .)


state 50

    (73) factor -> REAL .

    TIMES           reduce using rule 73 (factor -> REAL .)
    DIVIDE          reduce using rule 73 (factor -> REAL .)
    DIV             reduce using rule 73 (factor -> REAL .)
    MOD             reduce using rule 73 (factor -> REAL .)
    AND             reduce using rule 73 (factor -> REAL .)
    EQ              reduce using rule 73 (factor -> REAL .)
    NEQ             reduce using rule 73 (factor -> REAL .)
    LT              reduce using rule 73 (factor -> REAL .)
    LE              reduce using rule 73 (factor -> REAL .)
    GT              reduce using rule 73 (factor -> REAL .)
    GE              reduce using rule 73 (factor -> REAL .)
    IN              reduce using rule 73 (factor -> REAL .)
    PLUS            reduce using rule 73 (factor -> REAL .)
    MINUS           reduce using rule 73 (factor -> REAL .)
    OR              reduce using rule 73 (factor -> REAL .)
    THEN            reduce using rule 73 (factor -> REAL .)
    DO              reduce using rule 73 (factor -> REAL .)
    END             reduce using rule 73 (factor -> REAL .)
    SEMICOLON       reduce using rule 73 (factor -> REAL .)
    ELSE            reduce using rule 73 (factor -> REAL .)
    RPAREN          reduce using rule 73 (factor -> REAL .)
    COMMA           reduce using rule 73 (factor -> REAL .)
    RBRACKET        reduce using rule 73 (factor -> REAL .)
    TO              reduce using rule 73 (factor -> REAL .)
    DOWNTO          reduce using rule 73 (factor -> REAL .)


state 51

    (74) factor -> STRING .

    TIMES           reduce using rule 74 (factor -> STRING .)
    DIVIDE          reduce using rule 74 (factor -> STRING .)
    DIV             reduce using rule 74 (factor -> STRING .)
    MOD             reduce using rule 74 (factor -> STRING .)
    AND             reduce using rule 74 (factor -> STRING .)
    EQ              reduce using rule 74 (factor -> STRING .)
    NEQ             reduce using rule 74 (factor -> STRING .)
    LT              reduce using rule 74 (factor -> STRING .)
    LE              reduce using rule 74 (factor -> STRING .)
    GT              reduce using rule 74 (factor -> STRING .)
    GE              reduce using rule 74 (factor -> STRING .)
    IN              reduce using rule 74 (factor -> STRING .)
    PLUS            reduce using rule 74 (factor -> STRING .)
    MINUS           reduce using rule 74 (factor -> STRING .)
    OR              reduce using rule 74 (factor -> STRING .)
    THEN            reduce using rule 74 (factor -> STRING .)
    DO              reduce using rule 74 (factor -> STRING .)
    END             reduce using rule 74 (factor -> STRING .)
    SEMICOLON       reduce using rule 74 (factor -> STRING .)
    ELSE            reduce using rule 74 (factor -> STRING .)
    RPAREN          reduce using rule 74 (factor -> STRING .)
    COMMA           reduce using rule 74 (factor -> STRING .)
    RBRACKET        reduce using rule 74 (factor -> STRING .)
    TO              reduce using rule 74 (factor -> STRING .)
    DOWNTO          reduce using rule 74 (factor -> STRING .)


state 52

    (75) factor -> TRUE .

    TIMES           reduce using rule 75 (factor -> TRUE .)
    DIVIDE          reduce using rule 75 (factor -> TRUE .)
    DIV             reduce using rule 75 (factor -> TRUE .)
    MOD             reduce using rule 75 (factor -> TRUE .)
    AND             reduce using rule 75 (factor -> TRUE .)
    EQ              reduce using rule 75 (factor -> TRUE .)
    NEQ             reduce using rule 75 (factor -> TRUE .)
    LT              reduce using rule 75 (factor -> TRUE .)
    LE              reduce using rule 75 (factor -> TRUE .)
    GT              reduce using rule 75 (factor -> TRUE .)
    GE              reduce using rule 75 (factor -> TRUE .)
    IN              reduce using rule 75 (factor -> TRUE .)
    PLUS            reduce using rule 75 (factor -> TRUE .)
    MINUS           reduce using rule 75 (factor -> TRUE .)
    OR              reduce using rule 75 (factor -> TRUE .)
    THEN            reduce using rule 75 (factor -> TRUE .)
    DO              reduce using rule 75 (factor -> TRUE .)
    END             reduce using rule 75 (factor -> TRUE .)
    SEMICOLON       reduce using rule 75 (factor -> TRUE .)
    ELSE            reduce using rule 75 (factor -> TRUE .)
    RPAREN          reduce using rule 75 (factor -> TRUE .)
    COMMA           reduce using rule 75 (factor -> TRUE .)
    RBRACKET        reduce using rule 75 (factor -> TRUE .)
    TO              reduce using rule 75 (factor -> TRUE .)
    DOWNTO          reduce using rule 75 (factor -> TRUE .)


state 53

    (76) factor -> FALSE .

    TIMES           reduce using rule 76 (factor -> FALSE .)
    DIVIDE          reduce using rule 76 (factor -> FALSE .)
    DIV             reduce using rule 76 (factor -> FALSE .)
    MOD             reduce using rule 76 (factor -> FALSE .)
    AND             reduce using rule 76 (factor -> FALSE .)
    EQ              reduce using rule 76 (factor -> FALSE .)
    NEQ             reduce using rule 76 (factor -> FALSE .)
    LT              reduce using rule 76 (factor -> FALSE .)
    LE              reduce using rule 76 (factor -> FALSE .)
    GT              reduce using rule 76 (factor -> FALSE .)
    GE              reduce using rule 76 (factor -> FALSE .)
    IN              reduce using rule 76 (factor -> FALSE .)
    PLUS            reduce using rule 76 (factor -> FALSE .)
    MINUS           reduce using rule 76 (factor -> FALSE .)
    OR              reduce using rule 76 (factor -> FALSE .)
    THEN            reduce using rule 76 (factor -> FALSE .)
    DO              reduce using rule 76 (factor -> FALSE .)
    END             reduce using rule 76 (factor -> FALSE .)
    SEMICOLON       reduce using rule 76 (factor -> FALSE .)
    ELSE            reduce using rule 76 (factor -> FALSE .)
    RPAREN          reduce using rule 76 (factor -> FALSE .)
    COMMA           reduce using rule 76 (factor -> FALSE .)
    RBRACKET        reduce using rule 76 (factor -> FALSE .)
    TO              reduce using rule 76 (factor -> FALSE .)
    DOWNTO          reduce using rule 76 (factor -> FALSE .)


state 54

    (77) factor -> LPAREN . expression RPAREN
    (50) expression -> . simple_expression
    (51) expression -> . simple_expression relop simple_expression
    (59) simple_expression -> . term
    (60) simple_expression -> . simple_expression addop term
    (64) term -> . factor
    (65) term -> . term mulop factor
    (71) factor -> . variable
    (72) factor -> . INTEGER
    (73) factor -> . REAL
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . function_call
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET
    (80) function_call -> . ID LPAREN expression_list RPAREN
    (81) function_call -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 49
    REAL            shift and go to state 50
    STRING          shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LPAREN          shift and go to state 54
    NOT             shift and go to state 55
    ID              shift and go to state 57

    expression                     shift and go to state 98
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 48
    function_call                  shift and go to state 56

state 55

    (78) factor -> NOT . factor
    (71) factor -> . variable
    (72) factor -> . INTEGER
    (73) factor -> . REAL
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . function_call
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET
    (80) function_call -> . ID LPAREN expression_list RPAREN
    (81) function_call -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 49
    REAL            shift and go to state 50
    STRING          shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LPAREN          shift and go to state 54
    NOT             shift and go to state 55
    ID              shift and go to state 57

    factor                         shift and go to state 99
    variable                       shift and go to state 48
    function_call                  shift and go to state 56

state 56

    (79) factor -> function_call .

    TIMES           reduce using rule 79 (factor -> function_call .)
    DIVIDE          reduce using rule 79 (factor -> function_call .)
    DIV             reduce using rule 79 (factor -> function_call .)
    MOD             reduce using rule 79 (factor -> function_call .)
    AND             reduce using rule 79 (factor -> function_call .)
    EQ              reduce using rule 79 (factor -> function_call .)
    NEQ             reduce using rule 79 (factor -> function_call .)
    LT              reduce using rule 79 (factor -> function_call .)
    LE              reduce using rule 79 (factor -> function_call .)
    GT              reduce using rule 79 (factor -> function_call .)
    GE              reduce using rule 79 (factor -> function_call .)
    IN              reduce using rule 79 (factor -> function_call .)
    PLUS            reduce using rule 79 (factor -> function_call .)
    MINUS           reduce using rule 79 (factor -> function_call .)
    OR              reduce using rule 79 (factor -> function_call .)
    THEN            reduce using rule 79 (factor -> function_call .)
    DO              reduce using rule 79 (factor -> function_call .)
    END             reduce using rule 79 (factor -> function_call .)
    SEMICOLON       reduce using rule 79 (factor -> function_call .)
    ELSE            reduce using rule 79 (factor -> function_call .)
    RPAREN          reduce using rule 79 (factor -> function_call .)
    COMMA           reduce using rule 79 (factor -> function_call .)
    RBRACKET        reduce using rule 79 (factor -> function_call .)
    TO              reduce using rule 79 (factor -> function_call .)
    DOWNTO          reduce using rule 79 (factor -> function_call .)


state 57

    (34) variable -> ID .
    (35) variable -> ID . LBRACKET expression RBRACKET
    (80) function_call -> ID . LPAREN expression_list RPAREN
    (81) function_call -> ID . LPAREN RPAREN

    TIMES           reduce using rule 34 (variable -> ID .)
    DIVIDE          reduce using rule 34 (variable -> ID .)
    DIV             reduce using rule 34 (variable -> ID .)
    MOD             reduce using rule 34 (variable -> ID .)
    AND             reduce using rule 34 (variable -> ID .)
    EQ              reduce using rule 34 (variable -> ID .)
    NEQ             reduce using rule 34 (variable -> ID .)
    LT              reduce using rule 34 (variable -> ID .)
    LE              reduce using rule 34 (variable -> ID .)
    GT              reduce using rule 34 (variable -> ID .)
    GE              reduce using rule 34 (variable -> ID .)
    IN              reduce using rule 34 (variable -> ID .)
    PLUS            reduce using rule 34 (variable -> ID .)
    MINUS           reduce using rule 34 (variable -> ID .)
    OR              reduce using rule 34 (variable -> ID .)
    THEN            reduce using rule 34 (variable -> ID .)
    DO              reduce using rule 34 (variable -> ID .)
    END             reduce using rule 34 (variable -> ID .)
    SEMICOLON       reduce using rule 34 (variable -> ID .)
    ELSE            reduce using rule 34 (variable -> ID .)
    RPAREN          reduce using rule 34 (variable -> ID .)
    COMMA           reduce using rule 34 (variable -> ID .)
    RBRACKET        reduce using rule 34 (variable -> ID .)
    TO              reduce using rule 34 (variable -> ID .)
    DOWNTO          reduce using rule 34 (variable -> ID .)
    LBRACKET        shift and go to state 61
    LPAREN          shift and go to state 100


state 58

    (39) while_statement -> WHILE expression . DO statement

    DO              shift and go to state 101


state 59

    (40) for_statement -> FOR ID . ASSIGN expression TO expression DO statement
    (41) for_statement -> FOR ID . ASSIGN expression DOWNTO expression DO statement

    ASSIGN          shift and go to state 102


state 60

    (42) procedure_call_statement -> ID LPAREN . expression_list RPAREN
    (43) procedure_call_statement -> ID LPAREN . RPAREN
    (48) expression_list -> . expression_list COMMA expression
    (49) expression_list -> . expression
    (50) expression -> . simple_expression
    (51) expression -> . simple_expression relop simple_expression
    (59) simple_expression -> . term
    (60) simple_expression -> . simple_expression addop term
    (64) term -> . factor
    (65) term -> . term mulop factor
    (71) factor -> . variable
    (72) factor -> . INTEGER
    (73) factor -> . REAL
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . function_call
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET
    (80) function_call -> . ID LPAREN expression_list RPAREN
    (81) function_call -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 104
    INTEGER         shift and go to state 49
    REAL            shift and go to state 50
    STRING          shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LPAREN          shift and go to state 54
    NOT             shift and go to state 55
    ID              shift and go to state 57

    expression_list                shift and go to state 103
    expression                     shift and go to state 105
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 48
    function_call                  shift and go to state 56

state 61

    (35) variable -> ID LBRACKET . expression RBRACKET
    (50) expression -> . simple_expression
    (51) expression -> . simple_expression relop simple_expression
    (59) simple_expression -> . term
    (60) simple_expression -> . simple_expression addop term
    (64) term -> . factor
    (65) term -> . term mulop factor
    (71) factor -> . variable
    (72) factor -> . INTEGER
    (73) factor -> . REAL
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . function_call
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET
    (80) function_call -> . ID LPAREN expression_list RPAREN
    (81) function_call -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 49
    REAL            shift and go to state 50
    STRING          shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LPAREN          shift and go to state 54
    NOT             shift and go to state 55
    ID              shift and go to state 57

    expression                     shift and go to state 106
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 48
    function_call                  shift and go to state 56

state 62

    (44) procedure_call_statement -> WRITELN LPAREN . expression_list RPAREN
    (45) procedure_call_statement -> WRITELN LPAREN . RPAREN
    (48) expression_list -> . expression_list COMMA expression
    (49) expression_list -> . expression
    (50) expression -> . simple_expression
    (51) expression -> . simple_expression relop simple_expression
    (59) simple_expression -> . term
    (60) simple_expression -> . simple_expression addop term
    (64) term -> . factor
    (65) term -> . term mulop factor
    (71) factor -> . variable
    (72) factor -> . INTEGER
    (73) factor -> . REAL
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . function_call
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET
    (80) function_call -> . ID LPAREN expression_list RPAREN
    (81) function_call -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 108
    INTEGER         shift and go to state 49
    REAL            shift and go to state 50
    STRING          shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LPAREN          shift and go to state 54
    NOT             shift and go to state 55
    ID              shift and go to state 57

    expression_list                shift and go to state 107
    expression                     shift and go to state 105
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 48
    function_call                  shift and go to state 56

state 63

    (46) procedure_call_statement -> READLN LPAREN . variable RPAREN
    (47) procedure_call_statement -> READLN LPAREN . RPAREN
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET

    RPAREN          shift and go to state 110
    ID              shift and go to state 111

    variable                       shift and go to state 109

state 64

    (36) halt_statement -> HALT SEMICOLON .

    END             reduce using rule 36 (halt_statement -> HALT SEMICOLON .)
    SEMICOLON       reduce using rule 36 (halt_statement -> HALT SEMICOLON .)
    ELSE            reduce using rule 36 (halt_statement -> HALT SEMICOLON .)


state 65

    (12) var_declaration -> id_list COLON type_spec . SEMICOLON

    SEMICOLON       shift and go to state 112


state 66

    (15) type_spec -> INTEGER_TYPE .

    SEMICOLON       reduce using rule 15 (type_spec -> INTEGER_TYPE .)
    RPAREN          reduce using rule 15 (type_spec -> INTEGER_TYPE .)


state 67

    (16) type_spec -> REAL_TYPE .

    SEMICOLON       reduce using rule 16 (type_spec -> REAL_TYPE .)
    RPAREN          reduce using rule 16 (type_spec -> REAL_TYPE .)


state 68

    (17) type_spec -> BOOLEAN .

    SEMICOLON       reduce using rule 17 (type_spec -> BOOLEAN .)
    RPAREN          reduce using rule 17 (type_spec -> BOOLEAN .)


state 69

    (18) type_spec -> STRING_TYPE .

    SEMICOLON       reduce using rule 18 (type_spec -> STRING_TYPE .)
    RPAREN          reduce using rule 18 (type_spec -> STRING_TYPE .)


state 70

    (19) type_spec -> CHAR_TYPE .

    SEMICOLON       reduce using rule 19 (type_spec -> CHAR_TYPE .)
    RPAREN          reduce using rule 19 (type_spec -> CHAR_TYPE .)


state 71

    (20) type_spec -> array_type .

    SEMICOLON       reduce using rule 20 (type_spec -> array_type .)
    RPAREN          reduce using rule 20 (type_spec -> array_type .)


state 72

    (21) array_type -> ARRAY . LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_spec

    LBRACKET        shift and go to state 113


state 73

    (13) id_list -> id_list COMMA ID .

    COLON           reduce using rule 13 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 13 (id_list -> id_list COMMA ID .)


state 74

    (82) function_declaration -> FUNCTION ID LPAREN param_list . RPAREN COLON type_spec SEMICOLON function_block SEMICOLON
    (83) param_list -> param_list . SEMICOLON param

    RPAREN          shift and go to state 114
    SEMICOLON       shift and go to state 115


state 75

    (84) param_list -> param .

    RPAREN          reduce using rule 84 (param_list -> param .)
    SEMICOLON       reduce using rule 84 (param_list -> param .)


state 76

    (85) param -> id_list . COLON type_spec
    (13) id_list -> id_list . COMMA ID

    COLON           shift and go to state 116
    COMMA           shift and go to state 39


state 77

    (23) statement_list -> statement_list SEMICOLON statement .

    END             reduce using rule 23 (statement_list -> statement_list SEMICOLON statement .)
    SEMICOLON       reduce using rule 23 (statement_list -> statement_list SEMICOLON statement .)


state 78

    (33) assignment_statement -> variable ASSIGN expression .

    END             reduce using rule 33 (assignment_statement -> variable ASSIGN expression .)
    SEMICOLON       reduce using rule 33 (assignment_statement -> variable ASSIGN expression .)
    ELSE            reduce using rule 33 (assignment_statement -> variable ASSIGN expression .)


state 79

    (37) if_statement -> IF expression THEN . statement
    (38) if_statement -> IF expression THEN . statement ELSE statement
    (25) statement -> . compound_statement
    (26) statement -> . assignment_statement
    (27) statement -> . if_statement
    (28) statement -> . while_statement
    (29) statement -> . for_statement
    (30) statement -> . procedure_call_statement
    (31) statement -> . halt_statement
    (32) statement -> . empty
    (22) compound_statement -> . BEGIN statement_list END
    (33) assignment_statement -> . variable ASSIGN expression
    (37) if_statement -> . IF expression THEN statement
    (38) if_statement -> . IF expression THEN statement ELSE statement
    (39) while_statement -> . WHILE expression DO statement
    (40) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (41) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (42) procedure_call_statement -> . ID LPAREN expression_list RPAREN
    (43) procedure_call_statement -> . ID LPAREN RPAREN
    (44) procedure_call_statement -> . WRITELN LPAREN expression_list RPAREN
    (45) procedure_call_statement -> . WRITELN LPAREN RPAREN
    (46) procedure_call_statement -> . READLN LPAREN variable RPAREN
    (47) procedure_call_statement -> . READLN LPAREN RPAREN
    (36) halt_statement -> . HALT SEMICOLON
    (86) empty -> .
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 13
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    ID              shift and go to state 33
    WRITELN         shift and go to state 34
    READLN          shift and go to state 35
    HALT            shift and go to state 36
    ELSE            reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)

    statement                      shift and go to state 117
    compound_statement             shift and go to state 21
    assignment_statement           shift and go to state 22
    if_statement                   shift and go to state 23
    while_statement                shift and go to state 24
    for_statement                  shift and go to state 25
    procedure_call_statement       shift and go to state 26
    halt_statement                 shift and go to state 27
    empty                          shift and go to state 28
    variable                       shift and go to state 29

state 80

    (51) expression -> simple_expression relop . simple_expression
    (59) simple_expression -> . term
    (60) simple_expression -> . simple_expression addop term
    (64) term -> . factor
    (65) term -> . term mulop factor
    (71) factor -> . variable
    (72) factor -> . INTEGER
    (73) factor -> . REAL
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . function_call
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET
    (80) function_call -> . ID LPAREN expression_list RPAREN
    (81) function_call -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 49
    REAL            shift and go to state 50
    STRING          shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LPAREN          shift and go to state 54
    NOT             shift and go to state 55
    ID              shift and go to state 57

    simple_expression              shift and go to state 118
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 48
    function_call                  shift and go to state 56

state 81

    (60) simple_expression -> simple_expression addop . term
    (64) term -> . factor
    (65) term -> . term mulop factor
    (71) factor -> . variable
    (72) factor -> . INTEGER
    (73) factor -> . REAL
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . function_call
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET
    (80) function_call -> . ID LPAREN expression_list RPAREN
    (81) function_call -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 49
    REAL            shift and go to state 50
    STRING          shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LPAREN          shift and go to state 54
    NOT             shift and go to state 55
    ID              shift and go to state 57

    term                           shift and go to state 119
    factor                         shift and go to state 47
    variable                       shift and go to state 48
    function_call                  shift and go to state 56

state 82

    (52) relop -> EQ .

    INTEGER         reduce using rule 52 (relop -> EQ .)
    REAL            reduce using rule 52 (relop -> EQ .)
    STRING          reduce using rule 52 (relop -> EQ .)
    TRUE            reduce using rule 52 (relop -> EQ .)
    FALSE           reduce using rule 52 (relop -> EQ .)
    LPAREN          reduce using rule 52 (relop -> EQ .)
    NOT             reduce using rule 52 (relop -> EQ .)
    ID              reduce using rule 52 (relop -> EQ .)


state 83

    (53) relop -> NEQ .

    INTEGER         reduce using rule 53 (relop -> NEQ .)
    REAL            reduce using rule 53 (relop -> NEQ .)
    STRING          reduce using rule 53 (relop -> NEQ .)
    TRUE            reduce using rule 53 (relop -> NEQ .)
    FALSE           reduce using rule 53 (relop -> NEQ .)
    LPAREN          reduce using rule 53 (relop -> NEQ .)
    NOT             reduce using rule 53 (relop -> NEQ .)
    ID              reduce using rule 53 (relop -> NEQ .)


state 84

    (54) relop -> LT .

    INTEGER         reduce using rule 54 (relop -> LT .)
    REAL            reduce using rule 54 (relop -> LT .)
    STRING          reduce using rule 54 (relop -> LT .)
    TRUE            reduce using rule 54 (relop -> LT .)
    FALSE           reduce using rule 54 (relop -> LT .)
    LPAREN          reduce using rule 54 (relop -> LT .)
    NOT             reduce using rule 54 (relop -> LT .)
    ID              reduce using rule 54 (relop -> LT .)


state 85

    (55) relop -> LE .

    INTEGER         reduce using rule 55 (relop -> LE .)
    REAL            reduce using rule 55 (relop -> LE .)
    STRING          reduce using rule 55 (relop -> LE .)
    TRUE            reduce using rule 55 (relop -> LE .)
    FALSE           reduce using rule 55 (relop -> LE .)
    LPAREN          reduce using rule 55 (relop -> LE .)
    NOT             reduce using rule 55 (relop -> LE .)
    ID              reduce using rule 55 (relop -> LE .)


state 86

    (56) relop -> GT .

    INTEGER         reduce using rule 56 (relop -> GT .)
    REAL            reduce using rule 56 (relop -> GT .)
    STRING          reduce using rule 56 (relop -> GT .)
    TRUE            reduce using rule 56 (relop -> GT .)
    FALSE           reduce using rule 56 (relop -> GT .)
    LPAREN          reduce using rule 56 (relop -> GT .)
    NOT             reduce using rule 56 (relop -> GT .)
    ID              reduce using rule 56 (relop -> GT .)


state 87

    (57) relop -> GE .

    INTEGER         reduce using rule 57 (relop -> GE .)
    REAL            reduce using rule 57 (relop -> GE .)
    STRING          reduce using rule 57 (relop -> GE .)
    TRUE            reduce using rule 57 (relop -> GE .)
    FALSE           reduce using rule 57 (relop -> GE .)
    LPAREN          reduce using rule 57 (relop -> GE .)
    NOT             reduce using rule 57 (relop -> GE .)
    ID              reduce using rule 57 (relop -> GE .)


state 88

    (58) relop -> IN .

    INTEGER         reduce using rule 58 (relop -> IN .)
    REAL            reduce using rule 58 (relop -> IN .)
    STRING          reduce using rule 58 (relop -> IN .)
    TRUE            reduce using rule 58 (relop -> IN .)
    FALSE           reduce using rule 58 (relop -> IN .)
    LPAREN          reduce using rule 58 (relop -> IN .)
    NOT             reduce using rule 58 (relop -> IN .)
    ID              reduce using rule 58 (relop -> IN .)


state 89

    (61) addop -> PLUS .

    INTEGER         reduce using rule 61 (addop -> PLUS .)
    REAL            reduce using rule 61 (addop -> PLUS .)
    STRING          reduce using rule 61 (addop -> PLUS .)
    TRUE            reduce using rule 61 (addop -> PLUS .)
    FALSE           reduce using rule 61 (addop -> PLUS .)
    LPAREN          reduce using rule 61 (addop -> PLUS .)
    NOT             reduce using rule 61 (addop -> PLUS .)
    ID              reduce using rule 61 (addop -> PLUS .)


state 90

    (62) addop -> MINUS .

    INTEGER         reduce using rule 62 (addop -> MINUS .)
    REAL            reduce using rule 62 (addop -> MINUS .)
    STRING          reduce using rule 62 (addop -> MINUS .)
    TRUE            reduce using rule 62 (addop -> MINUS .)
    FALSE           reduce using rule 62 (addop -> MINUS .)
    LPAREN          reduce using rule 62 (addop -> MINUS .)
    NOT             reduce using rule 62 (addop -> MINUS .)
    ID              reduce using rule 62 (addop -> MINUS .)


state 91

    (63) addop -> OR .

    INTEGER         reduce using rule 63 (addop -> OR .)
    REAL            reduce using rule 63 (addop -> OR .)
    STRING          reduce using rule 63 (addop -> OR .)
    TRUE            reduce using rule 63 (addop -> OR .)
    FALSE           reduce using rule 63 (addop -> OR .)
    LPAREN          reduce using rule 63 (addop -> OR .)
    NOT             reduce using rule 63 (addop -> OR .)
    ID              reduce using rule 63 (addop -> OR .)


state 92

    (65) term -> term mulop . factor
    (71) factor -> . variable
    (72) factor -> . INTEGER
    (73) factor -> . REAL
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . function_call
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET
    (80) function_call -> . ID LPAREN expression_list RPAREN
    (81) function_call -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 49
    REAL            shift and go to state 50
    STRING          shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LPAREN          shift and go to state 54
    NOT             shift and go to state 55
    ID              shift and go to state 57

    factor                         shift and go to state 120
    variable                       shift and go to state 48
    function_call                  shift and go to state 56

state 93

    (66) mulop -> TIMES .

    INTEGER         reduce using rule 66 (mulop -> TIMES .)
    REAL            reduce using rule 66 (mulop -> TIMES .)
    STRING          reduce using rule 66 (mulop -> TIMES .)
    TRUE            reduce using rule 66 (mulop -> TIMES .)
    FALSE           reduce using rule 66 (mulop -> TIMES .)
    LPAREN          reduce using rule 66 (mulop -> TIMES .)
    NOT             reduce using rule 66 (mulop -> TIMES .)
    ID              reduce using rule 66 (mulop -> TIMES .)


state 94

    (67) mulop -> DIVIDE .

    INTEGER         reduce using rule 67 (mulop -> DIVIDE .)
    REAL            reduce using rule 67 (mulop -> DIVIDE .)
    STRING          reduce using rule 67 (mulop -> DIVIDE .)
    TRUE            reduce using rule 67 (mulop -> DIVIDE .)
    FALSE           reduce using rule 67 (mulop -> DIVIDE .)
    LPAREN          reduce using rule 67 (mulop -> DIVIDE .)
    NOT             reduce using rule 67 (mulop -> DIVIDE .)
    ID              reduce using rule 67 (mulop -> DIVIDE .)


state 95

    (68) mulop -> DIV .

    INTEGER         reduce using rule 68 (mulop -> DIV .)
    REAL            reduce using rule 68 (mulop -> DIV .)
    STRING          reduce using rule 68 (mulop -> DIV .)
    TRUE            reduce using rule 68 (mulop -> DIV .)
    FALSE           reduce using rule 68 (mulop -> DIV .)
    LPAREN          reduce using rule 68 (mulop -> DIV .)
    NOT             reduce using rule 68 (mulop -> DIV .)
    ID              reduce using rule 68 (mulop -> DIV .)


state 96

    (69) mulop -> MOD .

    INTEGER         reduce using rule 69 (mulop -> MOD .)
    REAL            reduce using rule 69 (mulop -> MOD .)
    STRING          reduce using rule 69 (mulop -> MOD .)
    TRUE            reduce using rule 69 (mulop -> MOD .)
    FALSE           reduce using rule 69 (mulop -> MOD .)
    LPAREN          reduce using rule 69 (mulop -> MOD .)
    NOT             reduce using rule 69 (mulop -> MOD .)
    ID              reduce using rule 69 (mulop -> MOD .)


state 97

    (70) mulop -> AND .

    INTEGER         reduce using rule 70 (mulop -> AND .)
    REAL            reduce using rule 70 (mulop -> AND .)
    STRING          reduce using rule 70 (mulop -> AND .)
    TRUE            reduce using rule 70 (mulop -> AND .)
    FALSE           reduce using rule 70 (mulop -> AND .)
    LPAREN          reduce using rule 70 (mulop -> AND .)
    NOT             reduce using rule 70 (mulop -> AND .)
    ID              reduce using rule 70 (mulop -> AND .)


state 98

    (77) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 121


state 99

    (78) factor -> NOT factor .

    TIMES           reduce using rule 78 (factor -> NOT factor .)
    DIVIDE          reduce using rule 78 (factor -> NOT factor .)
    DIV             reduce using rule 78 (factor -> NOT factor .)
    MOD             reduce using rule 78 (factor -> NOT factor .)
    AND             reduce using rule 78 (factor -> NOT factor .)
    EQ              reduce using rule 78 (factor -> NOT factor .)
    NEQ             reduce using rule 78 (factor -> NOT factor .)
    LT              reduce using rule 78 (factor -> NOT factor .)
    LE              reduce using rule 78 (factor -> NOT factor .)
    GT              reduce using rule 78 (factor -> NOT factor .)
    GE              reduce using rule 78 (factor -> NOT factor .)
    IN              reduce using rule 78 (factor -> NOT factor .)
    PLUS            reduce using rule 78 (factor -> NOT factor .)
    MINUS           reduce using rule 78 (factor -> NOT factor .)
    OR              reduce using rule 78 (factor -> NOT factor .)
    THEN            reduce using rule 78 (factor -> NOT factor .)
    DO              reduce using rule 78 (factor -> NOT factor .)
    END             reduce using rule 78 (factor -> NOT factor .)
    SEMICOLON       reduce using rule 78 (factor -> NOT factor .)
    ELSE            reduce using rule 78 (factor -> NOT factor .)
    RPAREN          reduce using rule 78 (factor -> NOT factor .)
    COMMA           reduce using rule 78 (factor -> NOT factor .)
    RBRACKET        reduce using rule 78 (factor -> NOT factor .)
    TO              reduce using rule 78 (factor -> NOT factor .)
    DOWNTO          reduce using rule 78 (factor -> NOT factor .)


state 100

    (80) function_call -> ID LPAREN . expression_list RPAREN
    (81) function_call -> ID LPAREN . RPAREN
    (48) expression_list -> . expression_list COMMA expression
    (49) expression_list -> . expression
    (50) expression -> . simple_expression
    (51) expression -> . simple_expression relop simple_expression
    (59) simple_expression -> . term
    (60) simple_expression -> . simple_expression addop term
    (64) term -> . factor
    (65) term -> . term mulop factor
    (71) factor -> . variable
    (72) factor -> . INTEGER
    (73) factor -> . REAL
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . function_call
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET
    (80) function_call -> . ID LPAREN expression_list RPAREN
    (81) function_call -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 123
    INTEGER         shift and go to state 49
    REAL            shift and go to state 50
    STRING          shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LPAREN          shift and go to state 54
    NOT             shift and go to state 55
    ID              shift and go to state 57

    expression_list                shift and go to state 122
    expression                     shift and go to state 105
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 48
    function_call                  shift and go to state 56

state 101

    (39) while_statement -> WHILE expression DO . statement
    (25) statement -> . compound_statement
    (26) statement -> . assignment_statement
    (27) statement -> . if_statement
    (28) statement -> . while_statement
    (29) statement -> . for_statement
    (30) statement -> . procedure_call_statement
    (31) statement -> . halt_statement
    (32) statement -> . empty
    (22) compound_statement -> . BEGIN statement_list END
    (33) assignment_statement -> . variable ASSIGN expression
    (37) if_statement -> . IF expression THEN statement
    (38) if_statement -> . IF expression THEN statement ELSE statement
    (39) while_statement -> . WHILE expression DO statement
    (40) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (41) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (42) procedure_call_statement -> . ID LPAREN expression_list RPAREN
    (43) procedure_call_statement -> . ID LPAREN RPAREN
    (44) procedure_call_statement -> . WRITELN LPAREN expression_list RPAREN
    (45) procedure_call_statement -> . WRITELN LPAREN RPAREN
    (46) procedure_call_statement -> . READLN LPAREN variable RPAREN
    (47) procedure_call_statement -> . READLN LPAREN RPAREN
    (36) halt_statement -> . HALT SEMICOLON
    (86) empty -> .
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 13
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    ID              shift and go to state 33
    WRITELN         shift and go to state 34
    READLN          shift and go to state 35
    HALT            shift and go to state 36
    ELSE            reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)

    statement                      shift and go to state 124
    compound_statement             shift and go to state 21
    assignment_statement           shift and go to state 22
    if_statement                   shift and go to state 23
    while_statement                shift and go to state 24
    for_statement                  shift and go to state 25
    procedure_call_statement       shift and go to state 26
    halt_statement                 shift and go to state 27
    empty                          shift and go to state 28
    variable                       shift and go to state 29

state 102

    (40) for_statement -> FOR ID ASSIGN . expression TO expression DO statement
    (41) for_statement -> FOR ID ASSIGN . expression DOWNTO expression DO statement
    (50) expression -> . simple_expression
    (51) expression -> . simple_expression relop simple_expression
    (59) simple_expression -> . term
    (60) simple_expression -> . simple_expression addop term
    (64) term -> . factor
    (65) term -> . term mulop factor
    (71) factor -> . variable
    (72) factor -> . INTEGER
    (73) factor -> . REAL
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . function_call
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET
    (80) function_call -> . ID LPAREN expression_list RPAREN
    (81) function_call -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 49
    REAL            shift and go to state 50
    STRING          shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LPAREN          shift and go to state 54
    NOT             shift and go to state 55
    ID              shift and go to state 57

    expression                     shift and go to state 125
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 48
    function_call                  shift and go to state 56

state 103

    (42) procedure_call_statement -> ID LPAREN expression_list . RPAREN
    (48) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 126
    COMMA           shift and go to state 127


state 104

    (43) procedure_call_statement -> ID LPAREN RPAREN .

    END             reduce using rule 43 (procedure_call_statement -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 43 (procedure_call_statement -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 43 (procedure_call_statement -> ID LPAREN RPAREN .)


state 105

    (49) expression_list -> expression .

    RPAREN          reduce using rule 49 (expression_list -> expression .)
    COMMA           reduce using rule 49 (expression_list -> expression .)


state 106

    (35) variable -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 128


state 107

    (44) procedure_call_statement -> WRITELN LPAREN expression_list . RPAREN
    (48) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 129
    COMMA           shift and go to state 127


state 108

    (45) procedure_call_statement -> WRITELN LPAREN RPAREN .

    END             reduce using rule 45 (procedure_call_statement -> WRITELN LPAREN RPAREN .)
    SEMICOLON       reduce using rule 45 (procedure_call_statement -> WRITELN LPAREN RPAREN .)
    ELSE            reduce using rule 45 (procedure_call_statement -> WRITELN LPAREN RPAREN .)


state 109

    (46) procedure_call_statement -> READLN LPAREN variable . RPAREN

    RPAREN          shift and go to state 130


state 110

    (47) procedure_call_statement -> READLN LPAREN RPAREN .

    END             reduce using rule 47 (procedure_call_statement -> READLN LPAREN RPAREN .)
    SEMICOLON       reduce using rule 47 (procedure_call_statement -> READLN LPAREN RPAREN .)
    ELSE            reduce using rule 47 (procedure_call_statement -> READLN LPAREN RPAREN .)


state 111

    (34) variable -> ID .
    (35) variable -> ID . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 34 (variable -> ID .)
    LBRACKET        shift and go to state 61


state 112

    (12) var_declaration -> id_list COLON type_spec SEMICOLON .

    ID              reduce using rule 12 (var_declaration -> id_list COLON type_spec SEMICOLON .)
    BEGIN           reduce using rule 12 (var_declaration -> id_list COLON type_spec SEMICOLON .)


state 113

    (21) array_type -> ARRAY LBRACKET . INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_spec

    INTEGER         shift and go to state 131


state 114

    (82) function_declaration -> FUNCTION ID LPAREN param_list RPAREN . COLON type_spec SEMICOLON function_block SEMICOLON

    COLON           shift and go to state 132


state 115

    (83) param_list -> param_list SEMICOLON . param
    (85) param -> . id_list COLON type_spec
    (13) id_list -> . id_list COMMA ID
    (14) id_list -> . ID

    ID              shift and go to state 17

    param                          shift and go to state 133
    id_list                        shift and go to state 76

state 116

    (85) param -> id_list COLON . type_spec
    (15) type_spec -> . INTEGER_TYPE
    (16) type_spec -> . REAL_TYPE
    (17) type_spec -> . BOOLEAN
    (18) type_spec -> . STRING_TYPE
    (19) type_spec -> . CHAR_TYPE
    (20) type_spec -> . array_type
    (21) array_type -> . ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_spec

    INTEGER_TYPE    shift and go to state 66
    REAL_TYPE       shift and go to state 67
    BOOLEAN         shift and go to state 68
    STRING_TYPE     shift and go to state 69
    CHAR_TYPE       shift and go to state 70
    ARRAY           shift and go to state 72

    type_spec                      shift and go to state 134
    array_type                     shift and go to state 71

state 117

    (37) if_statement -> IF expression THEN statement .
    (38) if_statement -> IF expression THEN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    END             reduce using rule 37 (if_statement -> IF expression THEN statement .)
    SEMICOLON       reduce using rule 37 (if_statement -> IF expression THEN statement .)
    ELSE            shift and go to state 135

  ! ELSE            [ reduce using rule 37 (if_statement -> IF expression THEN statement .) ]


state 118

    (51) expression -> simple_expression relop simple_expression .
    (60) simple_expression -> simple_expression . addop term
    (61) addop -> . PLUS
    (62) addop -> . MINUS
    (63) addop -> . OR

    THEN            reduce using rule 51 (expression -> simple_expression relop simple_expression .)
    DO              reduce using rule 51 (expression -> simple_expression relop simple_expression .)
    END             reduce using rule 51 (expression -> simple_expression relop simple_expression .)
    SEMICOLON       reduce using rule 51 (expression -> simple_expression relop simple_expression .)
    ELSE            reduce using rule 51 (expression -> simple_expression relop simple_expression .)
    RPAREN          reduce using rule 51 (expression -> simple_expression relop simple_expression .)
    COMMA           reduce using rule 51 (expression -> simple_expression relop simple_expression .)
    RBRACKET        reduce using rule 51 (expression -> simple_expression relop simple_expression .)
    TO              reduce using rule 51 (expression -> simple_expression relop simple_expression .)
    DOWNTO          reduce using rule 51 (expression -> simple_expression relop simple_expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    OR              shift and go to state 91

    addop                          shift and go to state 81

state 119

    (60) simple_expression -> simple_expression addop term .
    (65) term -> term . mulop factor
    (66) mulop -> . TIMES
    (67) mulop -> . DIVIDE
    (68) mulop -> . DIV
    (69) mulop -> . MOD
    (70) mulop -> . AND

    EQ              reduce using rule 60 (simple_expression -> simple_expression addop term .)
    NEQ             reduce using rule 60 (simple_expression -> simple_expression addop term .)
    LT              reduce using rule 60 (simple_expression -> simple_expression addop term .)
    LE              reduce using rule 60 (simple_expression -> simple_expression addop term .)
    GT              reduce using rule 60 (simple_expression -> simple_expression addop term .)
    GE              reduce using rule 60 (simple_expression -> simple_expression addop term .)
    IN              reduce using rule 60 (simple_expression -> simple_expression addop term .)
    PLUS            reduce using rule 60 (simple_expression -> simple_expression addop term .)
    MINUS           reduce using rule 60 (simple_expression -> simple_expression addop term .)
    OR              reduce using rule 60 (simple_expression -> simple_expression addop term .)
    THEN            reduce using rule 60 (simple_expression -> simple_expression addop term .)
    DO              reduce using rule 60 (simple_expression -> simple_expression addop term .)
    END             reduce using rule 60 (simple_expression -> simple_expression addop term .)
    SEMICOLON       reduce using rule 60 (simple_expression -> simple_expression addop term .)
    ELSE            reduce using rule 60 (simple_expression -> simple_expression addop term .)
    RPAREN          reduce using rule 60 (simple_expression -> simple_expression addop term .)
    COMMA           reduce using rule 60 (simple_expression -> simple_expression addop term .)
    RBRACKET        reduce using rule 60 (simple_expression -> simple_expression addop term .)
    TO              reduce using rule 60 (simple_expression -> simple_expression addop term .)
    DOWNTO          reduce using rule 60 (simple_expression -> simple_expression addop term .)
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94
    DIV             shift and go to state 95
    MOD             shift and go to state 96
    AND             shift and go to state 97

    mulop                          shift and go to state 92

state 120

    (65) term -> term mulop factor .

    TIMES           reduce using rule 65 (term -> term mulop factor .)
    DIVIDE          reduce using rule 65 (term -> term mulop factor .)
    DIV             reduce using rule 65 (term -> term mulop factor .)
    MOD             reduce using rule 65 (term -> term mulop factor .)
    AND             reduce using rule 65 (term -> term mulop factor .)
    EQ              reduce using rule 65 (term -> term mulop factor .)
    NEQ             reduce using rule 65 (term -> term mulop factor .)
    LT              reduce using rule 65 (term -> term mulop factor .)
    LE              reduce using rule 65 (term -> term mulop factor .)
    GT              reduce using rule 65 (term -> term mulop factor .)
    GE              reduce using rule 65 (term -> term mulop factor .)
    IN              reduce using rule 65 (term -> term mulop factor .)
    PLUS            reduce using rule 65 (term -> term mulop factor .)
    MINUS           reduce using rule 65 (term -> term mulop factor .)
    OR              reduce using rule 65 (term -> term mulop factor .)
    THEN            reduce using rule 65 (term -> term mulop factor .)
    DO              reduce using rule 65 (term -> term mulop factor .)
    END             reduce using rule 65 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 65 (term -> term mulop factor .)
    ELSE            reduce using rule 65 (term -> term mulop factor .)
    RPAREN          reduce using rule 65 (term -> term mulop factor .)
    COMMA           reduce using rule 65 (term -> term mulop factor .)
    RBRACKET        reduce using rule 65 (term -> term mulop factor .)
    TO              reduce using rule 65 (term -> term mulop factor .)
    DOWNTO          reduce using rule 65 (term -> term mulop factor .)


state 121

    (77) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    IN              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 77 (factor -> LPAREN expression RPAREN .)


state 122

    (80) function_call -> ID LPAREN expression_list . RPAREN
    (48) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 136
    COMMA           shift and go to state 127


state 123

    (81) function_call -> ID LPAREN RPAREN .

    TIMES           reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    DIV             reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    MOD             reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    EQ              reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    NEQ             reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    LT              reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    LE              reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    GT              reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    GE              reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    IN              reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    THEN            reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    DO              reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    END             reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    TO              reduce using rule 81 (function_call -> ID LPAREN RPAREN .)
    DOWNTO          reduce using rule 81 (function_call -> ID LPAREN RPAREN .)


state 124

    (39) while_statement -> WHILE expression DO statement .

    END             reduce using rule 39 (while_statement -> WHILE expression DO statement .)
    SEMICOLON       reduce using rule 39 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 39 (while_statement -> WHILE expression DO statement .)


state 125

    (40) for_statement -> FOR ID ASSIGN expression . TO expression DO statement
    (41) for_statement -> FOR ID ASSIGN expression . DOWNTO expression DO statement

    TO              shift and go to state 137
    DOWNTO          shift and go to state 138


state 126

    (42) procedure_call_statement -> ID LPAREN expression_list RPAREN .

    END             reduce using rule 42 (procedure_call_statement -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 42 (procedure_call_statement -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 42 (procedure_call_statement -> ID LPAREN expression_list RPAREN .)


state 127

    (48) expression_list -> expression_list COMMA . expression
    (50) expression -> . simple_expression
    (51) expression -> . simple_expression relop simple_expression
    (59) simple_expression -> . term
    (60) simple_expression -> . simple_expression addop term
    (64) term -> . factor
    (65) term -> . term mulop factor
    (71) factor -> . variable
    (72) factor -> . INTEGER
    (73) factor -> . REAL
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . function_call
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET
    (80) function_call -> . ID LPAREN expression_list RPAREN
    (81) function_call -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 49
    REAL            shift and go to state 50
    STRING          shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LPAREN          shift and go to state 54
    NOT             shift and go to state 55
    ID              shift and go to state 57

    expression                     shift and go to state 139
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 48
    function_call                  shift and go to state 56

state 128

    (35) variable -> ID LBRACKET expression RBRACKET .

    ASSIGN          reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    DIV             reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    MOD             reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    AND             reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    EQ              reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    LT              reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    LE              reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    GT              reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    GE              reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    IN              reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    OR              reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    END             reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    TO              reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)
    DOWNTO          reduce using rule 35 (variable -> ID LBRACKET expression RBRACKET .)


state 129

    (44) procedure_call_statement -> WRITELN LPAREN expression_list RPAREN .

    END             reduce using rule 44 (procedure_call_statement -> WRITELN LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 44 (procedure_call_statement -> WRITELN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 44 (procedure_call_statement -> WRITELN LPAREN expression_list RPAREN .)


state 130

    (46) procedure_call_statement -> READLN LPAREN variable RPAREN .

    END             reduce using rule 46 (procedure_call_statement -> READLN LPAREN variable RPAREN .)
    SEMICOLON       reduce using rule 46 (procedure_call_statement -> READLN LPAREN variable RPAREN .)
    ELSE            reduce using rule 46 (procedure_call_statement -> READLN LPAREN variable RPAREN .)


state 131

    (21) array_type -> ARRAY LBRACKET INTEGER . PERIOD PERIOD INTEGER RBRACKET OF type_spec

    PERIOD          shift and go to state 140


state 132

    (82) function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON . type_spec SEMICOLON function_block SEMICOLON
    (15) type_spec -> . INTEGER_TYPE
    (16) type_spec -> . REAL_TYPE
    (17) type_spec -> . BOOLEAN
    (18) type_spec -> . STRING_TYPE
    (19) type_spec -> . CHAR_TYPE
    (20) type_spec -> . array_type
    (21) array_type -> . ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_spec

    INTEGER_TYPE    shift and go to state 66
    REAL_TYPE       shift and go to state 67
    BOOLEAN         shift and go to state 68
    STRING_TYPE     shift and go to state 69
    CHAR_TYPE       shift and go to state 70
    ARRAY           shift and go to state 72

    type_spec                      shift and go to state 141
    array_type                     shift and go to state 71

state 133

    (83) param_list -> param_list SEMICOLON param .

    RPAREN          reduce using rule 83 (param_list -> param_list SEMICOLON param .)
    SEMICOLON       reduce using rule 83 (param_list -> param_list SEMICOLON param .)


state 134

    (85) param -> id_list COLON type_spec .

    RPAREN          reduce using rule 85 (param -> id_list COLON type_spec .)
    SEMICOLON       reduce using rule 85 (param -> id_list COLON type_spec .)


state 135

    (38) if_statement -> IF expression THEN statement ELSE . statement
    (25) statement -> . compound_statement
    (26) statement -> . assignment_statement
    (27) statement -> . if_statement
    (28) statement -> . while_statement
    (29) statement -> . for_statement
    (30) statement -> . procedure_call_statement
    (31) statement -> . halt_statement
    (32) statement -> . empty
    (22) compound_statement -> . BEGIN statement_list END
    (33) assignment_statement -> . variable ASSIGN expression
    (37) if_statement -> . IF expression THEN statement
    (38) if_statement -> . IF expression THEN statement ELSE statement
    (39) while_statement -> . WHILE expression DO statement
    (40) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (41) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (42) procedure_call_statement -> . ID LPAREN expression_list RPAREN
    (43) procedure_call_statement -> . ID LPAREN RPAREN
    (44) procedure_call_statement -> . WRITELN LPAREN expression_list RPAREN
    (45) procedure_call_statement -> . WRITELN LPAREN RPAREN
    (46) procedure_call_statement -> . READLN LPAREN variable RPAREN
    (47) procedure_call_statement -> . READLN LPAREN RPAREN
    (36) halt_statement -> . HALT SEMICOLON
    (86) empty -> .
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 13
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    ID              shift and go to state 33
    WRITELN         shift and go to state 34
    READLN          shift and go to state 35
    HALT            shift and go to state 36
    ELSE            reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)

    statement                      shift and go to state 142
    compound_statement             shift and go to state 21
    assignment_statement           shift and go to state 22
    if_statement                   shift and go to state 23
    while_statement                shift and go to state 24
    for_statement                  shift and go to state 25
    procedure_call_statement       shift and go to state 26
    halt_statement                 shift and go to state 27
    empty                          shift and go to state 28
    variable                       shift and go to state 29

state 136

    (80) function_call -> ID LPAREN expression_list RPAREN .

    TIMES           reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    EQ              reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    NEQ             reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    LT              reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    LE              reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    GT              reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    GE              reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    IN              reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 80 (function_call -> ID LPAREN expression_list RPAREN .)


state 137

    (40) for_statement -> FOR ID ASSIGN expression TO . expression DO statement
    (50) expression -> . simple_expression
    (51) expression -> . simple_expression relop simple_expression
    (59) simple_expression -> . term
    (60) simple_expression -> . simple_expression addop term
    (64) term -> . factor
    (65) term -> . term mulop factor
    (71) factor -> . variable
    (72) factor -> . INTEGER
    (73) factor -> . REAL
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . function_call
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET
    (80) function_call -> . ID LPAREN expression_list RPAREN
    (81) function_call -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 49
    REAL            shift and go to state 50
    STRING          shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LPAREN          shift and go to state 54
    NOT             shift and go to state 55
    ID              shift and go to state 57

    expression                     shift and go to state 143
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 48
    function_call                  shift and go to state 56

state 138

    (41) for_statement -> FOR ID ASSIGN expression DOWNTO . expression DO statement
    (50) expression -> . simple_expression
    (51) expression -> . simple_expression relop simple_expression
    (59) simple_expression -> . term
    (60) simple_expression -> . simple_expression addop term
    (64) term -> . factor
    (65) term -> . term mulop factor
    (71) factor -> . variable
    (72) factor -> . INTEGER
    (73) factor -> . REAL
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . NOT factor
    (79) factor -> . function_call
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET
    (80) function_call -> . ID LPAREN expression_list RPAREN
    (81) function_call -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 49
    REAL            shift and go to state 50
    STRING          shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LPAREN          shift and go to state 54
    NOT             shift and go to state 55
    ID              shift and go to state 57

    expression                     shift and go to state 144
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47
    variable                       shift and go to state 48
    function_call                  shift and go to state 56

state 139

    (48) expression_list -> expression_list COMMA expression .

    RPAREN          reduce using rule 48 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 48 (expression_list -> expression_list COMMA expression .)


state 140

    (21) array_type -> ARRAY LBRACKET INTEGER PERIOD . PERIOD INTEGER RBRACKET OF type_spec

    PERIOD          shift and go to state 145


state 141

    (82) function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type_spec . SEMICOLON function_block SEMICOLON

    SEMICOLON       shift and go to state 146


state 142

    (38) if_statement -> IF expression THEN statement ELSE statement .

    END             reduce using rule 38 (if_statement -> IF expression THEN statement ELSE statement .)
    SEMICOLON       reduce using rule 38 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 38 (if_statement -> IF expression THEN statement ELSE statement .)


state 143

    (40) for_statement -> FOR ID ASSIGN expression TO expression . DO statement

    DO              shift and go to state 147


state 144

    (41) for_statement -> FOR ID ASSIGN expression DOWNTO expression . DO statement

    DO              shift and go to state 148


state 145

    (21) array_type -> ARRAY LBRACKET INTEGER PERIOD PERIOD . INTEGER RBRACKET OF type_spec

    INTEGER         shift and go to state 149


state 146

    (82) function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type_spec SEMICOLON . function_block SEMICOLON
    (6) function_block -> . VAR var_declarations compound_statement
    (7) function_block -> . compound_statement
    (22) compound_statement -> . BEGIN statement_list END

    VAR             shift and go to state 151
    BEGIN           shift and go to state 13

    function_block                 shift and go to state 150
    compound_statement             shift and go to state 152

state 147

    (40) for_statement -> FOR ID ASSIGN expression TO expression DO . statement
    (25) statement -> . compound_statement
    (26) statement -> . assignment_statement
    (27) statement -> . if_statement
    (28) statement -> . while_statement
    (29) statement -> . for_statement
    (30) statement -> . procedure_call_statement
    (31) statement -> . halt_statement
    (32) statement -> . empty
    (22) compound_statement -> . BEGIN statement_list END
    (33) assignment_statement -> . variable ASSIGN expression
    (37) if_statement -> . IF expression THEN statement
    (38) if_statement -> . IF expression THEN statement ELSE statement
    (39) while_statement -> . WHILE expression DO statement
    (40) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (41) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (42) procedure_call_statement -> . ID LPAREN expression_list RPAREN
    (43) procedure_call_statement -> . ID LPAREN RPAREN
    (44) procedure_call_statement -> . WRITELN LPAREN expression_list RPAREN
    (45) procedure_call_statement -> . WRITELN LPAREN RPAREN
    (46) procedure_call_statement -> . READLN LPAREN variable RPAREN
    (47) procedure_call_statement -> . READLN LPAREN RPAREN
    (36) halt_statement -> . HALT SEMICOLON
    (86) empty -> .
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 13
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    ID              shift and go to state 33
    WRITELN         shift and go to state 34
    READLN          shift and go to state 35
    HALT            shift and go to state 36
    ELSE            reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)

    statement                      shift and go to state 153
    compound_statement             shift and go to state 21
    assignment_statement           shift and go to state 22
    if_statement                   shift and go to state 23
    while_statement                shift and go to state 24
    for_statement                  shift and go to state 25
    procedure_call_statement       shift and go to state 26
    halt_statement                 shift and go to state 27
    empty                          shift and go to state 28
    variable                       shift and go to state 29

state 148

    (41) for_statement -> FOR ID ASSIGN expression DOWNTO expression DO . statement
    (25) statement -> . compound_statement
    (26) statement -> . assignment_statement
    (27) statement -> . if_statement
    (28) statement -> . while_statement
    (29) statement -> . for_statement
    (30) statement -> . procedure_call_statement
    (31) statement -> . halt_statement
    (32) statement -> . empty
    (22) compound_statement -> . BEGIN statement_list END
    (33) assignment_statement -> . variable ASSIGN expression
    (37) if_statement -> . IF expression THEN statement
    (38) if_statement -> . IF expression THEN statement ELSE statement
    (39) while_statement -> . WHILE expression DO statement
    (40) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (41) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (42) procedure_call_statement -> . ID LPAREN expression_list RPAREN
    (43) procedure_call_statement -> . ID LPAREN RPAREN
    (44) procedure_call_statement -> . WRITELN LPAREN expression_list RPAREN
    (45) procedure_call_statement -> . WRITELN LPAREN RPAREN
    (46) procedure_call_statement -> . READLN LPAREN variable RPAREN
    (47) procedure_call_statement -> . READLN LPAREN RPAREN
    (36) halt_statement -> . HALT SEMICOLON
    (86) empty -> .
    (34) variable -> . ID
    (35) variable -> . ID LBRACKET expression RBRACKET

    BEGIN           shift and go to state 13
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    ID              shift and go to state 33
    WRITELN         shift and go to state 34
    READLN          shift and go to state 35
    HALT            shift and go to state 36
    ELSE            reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)

    statement                      shift and go to state 154
    compound_statement             shift and go to state 21
    assignment_statement           shift and go to state 22
    if_statement                   shift and go to state 23
    while_statement                shift and go to state 24
    for_statement                  shift and go to state 25
    procedure_call_statement       shift and go to state 26
    halt_statement                 shift and go to state 27
    empty                          shift and go to state 28
    variable                       shift and go to state 29

state 149

    (21) array_type -> ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER . RBRACKET OF type_spec

    RBRACKET        shift and go to state 155


state 150

    (82) function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type_spec SEMICOLON function_block . SEMICOLON

    SEMICOLON       shift and go to state 156


state 151

    (6) function_block -> VAR . var_declarations compound_statement
    (10) var_declarations -> . var_declarations var_declaration
    (11) var_declarations -> . var_declaration
    (12) var_declaration -> . id_list COLON type_spec SEMICOLON
    (13) id_list -> . id_list COMMA ID
    (14) id_list -> . ID

    ID              shift and go to state 17

    var_declarations               shift and go to state 157
    var_declaration                shift and go to state 15
    id_list                        shift and go to state 16

state 152

    (7) function_block -> compound_statement .

    SEMICOLON       reduce using rule 7 (function_block -> compound_statement .)


state 153

    (40) for_statement -> FOR ID ASSIGN expression TO expression DO statement .

    END             reduce using rule 40 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    SEMICOLON       reduce using rule 40 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 40 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)


state 154

    (41) for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .

    END             reduce using rule 41 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    SEMICOLON       reduce using rule 41 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    ELSE            reduce using rule 41 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)


state 155

    (21) array_type -> ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET . OF type_spec

    OF              shift and go to state 158


state 156

    (82) function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type_spec SEMICOLON function_block SEMICOLON .

    BEGIN           reduce using rule 82 (function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type_spec SEMICOLON function_block SEMICOLON .)


state 157

    (6) function_block -> VAR var_declarations . compound_statement
    (10) var_declarations -> var_declarations . var_declaration
    (22) compound_statement -> . BEGIN statement_list END
    (12) var_declaration -> . id_list COLON type_spec SEMICOLON
    (13) id_list -> . id_list COMMA ID
    (14) id_list -> . ID

    BEGIN           shift and go to state 13
    ID              shift and go to state 17

    compound_statement             shift and go to state 159
    var_declaration                shift and go to state 37
    id_list                        shift and go to state 16

state 158

    (21) array_type -> ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF . type_spec
    (15) type_spec -> . INTEGER_TYPE
    (16) type_spec -> . REAL_TYPE
    (17) type_spec -> . BOOLEAN
    (18) type_spec -> . STRING_TYPE
    (19) type_spec -> . CHAR_TYPE
    (20) type_spec -> . array_type
    (21) array_type -> . ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_spec

    INTEGER_TYPE    shift and go to state 66
    REAL_TYPE       shift and go to state 67
    BOOLEAN         shift and go to state 68
    STRING_TYPE     shift and go to state 69
    CHAR_TYPE       shift and go to state 70
    ARRAY           shift and go to state 72

    type_spec                      shift and go to state 160
    array_type                     shift and go to state 71

state 159

    (6) function_block -> VAR var_declarations compound_statement .

    SEMICOLON       reduce using rule 6 (function_block -> VAR var_declarations compound_statement .)


state 160

    (21) array_type -> ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_spec .

    SEMICOLON       reduce using rule 21 (array_type -> ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_spec .)
    RPAREN          reduce using rule 21 (array_type -> ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_spec .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 117 resolved as shift
