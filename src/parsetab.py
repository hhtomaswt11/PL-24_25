
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND APOSTROPHE ARRAY ASSIGN BEGIN BOOLEAN CASE CHAR_TYPE COLON COMMA COMMENT CONST DIV DIVIDE DO DOWNTO ELSE END EQ FALSE FILE FOR FUNCTION GE GOTO GT HALT ID IF IN INTEGER INTEGER_TYPE LABEL LBRACKET LE LPAREN LT MINUS MOD NEQ NIL NOT OF OR PACKED PERIOD PLUS PROCEDURE PROGRAM RBRACKET READ READLN REAL REAL_TYPE RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_TYPE THEN TIMES TO TRUE TYPE UNTIL VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON block PERIODblock : declarations compound_statementdeclarations : VAR var_declarations\n                        | function_declaration\n                        | emptyfunction_block : VAR var_declarations compound_statement\n                        | compound_statementdeclaration : VAR var_declarations\n                    | function_declarationvar_declarations : var_declarations var_declaration\n                           | var_declarationvar_declaration : id_list COLON type_spec SEMICOLONid_list : id_list COMMA ID\n                  | IDtype_spec : INTEGER_TYPE\n                     | REAL_TYPE\n                     | BOOLEAN\n                     | STRING_TYPE\n                     | CHAR_TYPE\n                     | array_typearray_type : ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_speccompound_statement : BEGIN statement_list ENDstatement_list : statement_list SEMICOLON statement\n                         | statementstatement : compound_statement\n                     | assignment_statement\n                     | if_statement\n                     | while_statement\n                     | for_statement\n                     | procedure_call_statement\n                     | halt_statement\n                     | emptyassignment_statement : variable ASSIGN expressionvariable : ID\n                | ID LBRACKET expression RBRACKETif_statement : IF expression THEN statement\n                        | IF expression THEN statement ELSE statementwhile_statement : WHILE expression DO statementfor_statement : FOR ID ASSIGN expression TO expression DO statement\n                        | FOR ID ASSIGN expression DOWNTO expression DO statementprocedure_call_statement : ID LPAREN expression_list RPAREN\n                                   | ID LPAREN RPAREN\n                                   | WRITELN LPAREN expression_list RPAREN\n                                   | WRITELN LPAREN RPAREN\n                                   | READLN LPAREN variable RPAREN\n                                   | READLN LPAREN RPARENexpression_list : expression_list COMMA expression\n                       | expressionexpression : simple_expression\n                     | simple_expression relop simple_expressionrelop : EQ\n                | NEQ\n                | LT\n                | LE\n                | GT\n                | GE\n                | INsimple_expression : term\n                            | simple_expression addop termaddop : PLUS\n                | MINUS\n                | ORterm : factor\n                | term mulop factormulop : TIMES\n                | DIVIDE\n                | DIV\n                | MOD\n                | ANDfactor : variable\n                 | INTEGER\n                 | REAL\n                 | STRING\n                 | TRUE\n                 | FALSE\n                 | LPAREN expression RPAREN\n                 | NOT factor\n                 | function_callexpression : variable COLON INTEGER\n                    | variable COLON INTEGER COLON INTEGERfunction_call : ID LPAREN expression_list RPAREN\n                        | ID LPAREN RPARENfunction_declaration : FUNCTION ID LPAREN param_list RPAREN COLON type_spec SEMICOLON function_block SEMICOLONparam_list : param_list SEMICOLON param\n                    | paramparam : id_list COLON type_spechalt_statement : HALT SEMICOLONempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,11,],[0,-1,]),'ID':([2,7,10,13,14,15,30,31,32,37,39,40,42,43,55,56,60,61,62,63,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,103,104,114,117,130,138,141,142,152,153,156,162,],[3,17,18,33,17,-11,49,49,59,-10,73,17,33,49,49,49,49,49,49,113,33,49,49,-51,-52,-53,-54,-55,-56,-57,-60,-61,-62,49,-65,-66,-67,-68,-69,49,33,49,-12,17,49,33,49,49,33,33,17,17,]),'SEMICOLON':([3,13,19,20,21,22,23,24,25,26,27,28,36,41,42,45,46,47,48,49,50,51,52,53,54,57,64,65,66,67,68,69,70,71,74,75,77,78,79,101,102,103,106,110,112,119,120,121,122,123,125,126,127,129,131,132,133,136,137,138,140,145,146,147,152,153,155,157,158,159,164,165,],[4,-88,42,-24,-25,-26,-27,-28,-29,-30,-31,-32,64,-22,-88,-49,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-87,114,-15,-16,-17,-18,-19,-20,117,-85,-23,-33,-88,-77,-70,-88,-42,-44,-46,-36,-50,-59,-79,-64,-82,-76,-38,-41,-35,-43,-45,-84,-86,-88,-81,151,-37,-80,-88,-88,161,-7,-39,-40,-6,-21,]),'VAR':([4,151,],[7,156,]),'FUNCTION':([4,],[10,]),'BEGIN':([4,6,8,9,13,14,15,37,42,79,103,114,138,151,152,153,161,162,],[-88,13,-4,-5,13,-3,-11,-10,13,13,13,-12,13,13,13,13,-83,13,]),'PERIOD':([5,12,41,134,144,],[11,-2,-22,144,150,]),'IF':([13,42,79,103,138,152,153,],[30,30,30,30,30,30,30,]),'WHILE':([13,42,79,103,138,152,153,],[31,31,31,31,31,31,31,]),'FOR':([13,42,79,103,138,152,153,],[32,32,32,32,32,32,32,]),'WRITELN':([13,42,79,103,138,152,153,],[34,34,34,34,34,34,34,]),'READLN':([13,42,79,103,138,152,153,],[35,35,35,35,35,35,35,]),'HALT':([13,42,79,103,138,152,153,],[36,36,36,36,36,36,36,]),'END':([13,19,20,21,22,23,24,25,26,27,28,41,42,45,46,47,48,49,50,51,52,53,54,57,64,77,78,79,101,102,103,106,110,112,119,120,121,122,123,125,126,127,129,131,132,133,138,140,146,147,152,153,158,159,],[-88,41,-24,-25,-26,-27,-28,-29,-30,-31,-32,-22,-88,-49,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-87,-23,-33,-88,-77,-70,-88,-42,-44,-46,-36,-50,-59,-79,-64,-82,-76,-38,-41,-35,-43,-45,-88,-81,-37,-80,-88,-88,-39,-40,]),'COLON':([16,17,46,49,73,76,116,122,131,],[38,-14,92,-34,-13,118,135,139,-35,]),'COMMA':([16,17,45,46,47,48,49,50,51,52,53,54,57,73,76,101,102,105,107,109,120,121,122,123,124,125,126,131,140,143,147,],[39,-14,-49,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-13,39,-77,-70,130,-48,130,-50,-59,-79,-64,130,-82,-76,-35,-81,-47,-80,]),'LPAREN':([18,30,31,33,34,35,43,49,55,56,60,61,62,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,104,130,141,142,],[40,55,55,60,62,63,55,99,55,55,55,55,55,55,55,-51,-52,-53,-54,-55,-56,-57,-60,-61,-62,55,-65,-66,-67,-68,-69,55,55,55,55,55,]),'ELSE':([21,22,23,24,25,26,27,28,41,45,46,47,48,49,50,51,52,53,54,57,64,78,79,101,102,103,106,110,112,119,120,121,122,123,125,126,127,129,131,132,133,138,140,146,147,152,153,158,159,],[-25,-26,-27,-28,-29,-30,-31,-32,-22,-49,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-87,-33,-88,-77,-70,-88,-42,-44,-46,138,-50,-59,-79,-64,-82,-76,-38,-41,-35,-43,-45,-88,-81,-37,-80,-88,-88,-39,-40,]),'ASSIGN':([29,33,59,131,],[43,-34,104,-35,]),'INTEGER':([30,31,43,55,56,60,61,62,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,115,130,139,141,142,150,],[47,47,47,47,47,47,47,47,47,47,-51,-52,-53,-54,-55,-56,-57,-60,-61,-62,122,47,-65,-66,-67,-68,-69,47,47,134,47,147,47,47,154,]),'REAL':([30,31,43,55,56,60,61,62,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,104,130,141,142,],[51,51,51,51,51,51,51,51,51,51,-51,-52,-53,-54,-55,-56,-57,-60,-61,-62,51,-65,-66,-67,-68,-69,51,51,51,51,51,]),'STRING':([30,31,43,55,56,60,61,62,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,104,130,141,142,],[52,52,52,52,52,52,52,52,52,52,-51,-52,-53,-54,-55,-56,-57,-60,-61,-62,52,-65,-66,-67,-68,-69,52,52,52,52,52,]),'TRUE':([30,31,43,55,56,60,61,62,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,104,130,141,142,],[53,53,53,53,53,53,53,53,53,53,-51,-52,-53,-54,-55,-56,-57,-60,-61,-62,53,-65,-66,-67,-68,-69,53,53,53,53,53,]),'FALSE':([30,31,43,55,56,60,61,62,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,104,130,141,142,],[54,54,54,54,54,54,54,54,54,54,-51,-52,-53,-54,-55,-56,-57,-60,-61,-62,54,-65,-66,-67,-68,-69,54,54,54,54,54,]),'NOT':([30,31,43,55,56,60,61,62,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,104,130,141,142,],[56,56,56,56,56,56,56,56,56,56,-51,-52,-53,-54,-55,-56,-57,-60,-61,-62,56,-65,-66,-67,-68,-69,56,56,56,56,56,]),'LBRACKET':([33,49,72,113,],[61,61,115,61,]),'INTEGER_TYPE':([38,118,135,163,],[66,66,66,66,]),'REAL_TYPE':([38,118,135,163,],[67,67,67,67,]),'BOOLEAN':([38,118,135,163,],[68,68,68,68,]),'STRING_TYPE':([38,118,135,163,],[69,69,69,69,]),'CHAR_TYPE':([38,118,135,163,],[70,70,70,70,]),'ARRAY':([38,118,135,163,],[72,72,72,72,]),'THEN':([44,45,46,47,48,49,50,51,52,53,54,57,101,102,120,121,122,123,125,126,131,140,147,],[79,-49,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-77,-70,-50,-59,-79,-64,-82,-76,-35,-81,-80,]),'DO':([45,46,47,48,49,50,51,52,53,54,57,58,101,102,120,121,122,123,125,126,131,140,147,148,149,],[-49,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,103,-77,-70,-50,-59,-79,-64,-82,-76,-35,-81,-80,152,153,]),'RPAREN':([45,46,47,48,49,50,51,52,53,54,57,60,62,63,66,67,68,69,70,71,74,75,99,100,101,102,105,107,109,111,113,120,121,122,123,124,125,126,131,136,137,140,143,147,165,],[-49,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,106,110,112,-15,-16,-17,-18,-19,-20,116,-85,125,126,-77,-70,129,-48,132,133,-34,-50,-59,-79,-64,140,-82,-76,-35,-84,-86,-81,-47,-80,-21,]),'RBRACKET':([45,46,47,48,49,50,51,52,53,54,57,101,102,108,120,121,122,123,125,126,131,140,147,154,],[-49,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-77,-70,131,-50,-59,-79,-64,-82,-76,-35,-81,-80,160,]),'TO':([45,46,47,48,49,50,51,52,53,54,57,101,102,120,121,122,123,125,126,128,131,140,147,],[-49,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-77,-70,-50,-59,-79,-64,-82,-76,141,-35,-81,-80,]),'DOWNTO':([45,46,47,48,49,50,51,52,53,54,57,101,102,120,121,122,123,125,126,128,131,140,147,],[-49,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-77,-70,-50,-59,-79,-64,-82,-76,142,-35,-81,-80,]),'EQ':([45,46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[82,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-77,-70,-59,-64,-82,-76,-35,-81,]),'NEQ':([45,46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[83,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-77,-70,-59,-64,-82,-76,-35,-81,]),'LT':([45,46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[84,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-77,-70,-59,-64,-82,-76,-35,-81,]),'LE':([45,46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[85,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-77,-70,-59,-64,-82,-76,-35,-81,]),'GT':([45,46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[86,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-77,-70,-59,-64,-82,-76,-35,-81,]),'GE':([45,46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[87,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-77,-70,-59,-64,-82,-76,-35,-81,]),'IN':([45,46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[88,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-77,-70,-59,-64,-82,-76,-35,-81,]),'PLUS':([45,46,47,48,49,50,51,52,53,54,57,101,102,120,121,123,125,126,131,140,],[89,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-77,-70,89,-59,-64,-82,-76,-35,-81,]),'MINUS':([45,46,47,48,49,50,51,52,53,54,57,101,102,120,121,123,125,126,131,140,],[90,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-77,-70,90,-59,-64,-82,-76,-35,-81,]),'OR':([45,46,47,48,49,50,51,52,53,54,57,101,102,120,121,123,125,126,131,140,],[91,-70,-71,-58,-34,-63,-72,-73,-74,-75,-78,-77,-70,91,-59,-64,-82,-76,-35,-81,]),'TIMES':([46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[-70,-71,94,-34,-63,-72,-73,-74,-75,-78,-77,-70,94,-64,-82,-76,-35,-81,]),'DIVIDE':([46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[-70,-71,95,-34,-63,-72,-73,-74,-75,-78,-77,-70,95,-64,-82,-76,-35,-81,]),'DIV':([46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[-70,-71,96,-34,-63,-72,-73,-74,-75,-78,-77,-70,96,-64,-82,-76,-35,-81,]),'MOD':([46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[-70,-71,97,-34,-63,-72,-73,-74,-75,-78,-77,-70,97,-64,-82,-76,-35,-81,]),'AND':([46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[-70,-71,98,-34,-63,-72,-73,-74,-75,-78,-77,-70,98,-64,-82,-76,-35,-81,]),'OF':([160,],[163,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,],[5,]),'declarations':([4,],[6,]),'function_declaration':([4,],[8,]),'empty':([4,13,42,79,103,138,152,153,],[9,28,28,28,28,28,28,28,]),'compound_statement':([6,13,42,79,103,138,151,152,153,162,],[12,21,21,21,21,21,157,21,21,164,]),'var_declarations':([7,156,],[14,162,]),'var_declaration':([7,14,156,162,],[15,37,15,37,]),'id_list':([7,14,40,117,156,162,],[16,16,76,76,16,16,]),'statement_list':([13,],[19,]),'statement':([13,42,79,103,138,152,153,],[20,77,119,127,146,158,159,]),'assignment_statement':([13,42,79,103,138,152,153,],[22,22,22,22,22,22,22,]),'if_statement':([13,42,79,103,138,152,153,],[23,23,23,23,23,23,23,]),'while_statement':([13,42,79,103,138,152,153,],[24,24,24,24,24,24,24,]),'for_statement':([13,42,79,103,138,152,153,],[25,25,25,25,25,25,25,]),'procedure_call_statement':([13,42,79,103,138,152,153,],[26,26,26,26,26,26,26,]),'halt_statement':([13,42,79,103,138,152,153,],[27,27,27,27,27,27,27,]),'variable':([13,30,31,42,43,55,56,60,61,62,63,79,80,81,93,99,103,104,130,138,141,142,152,153,],[29,46,46,29,46,46,102,46,46,46,111,29,102,102,102,46,29,46,46,29,46,46,29,29,]),'expression':([30,31,43,55,60,61,62,99,104,130,141,142,],[44,58,78,100,107,108,107,107,128,143,148,149,]),'simple_expression':([30,31,43,55,60,61,62,80,99,104,130,141,142,],[45,45,45,45,45,45,45,120,45,45,45,45,45,]),'term':([30,31,43,55,60,61,62,80,81,99,104,130,141,142,],[48,48,48,48,48,48,48,48,121,48,48,48,48,48,]),'factor':([30,31,43,55,56,60,61,62,80,81,93,99,104,130,141,142,],[50,50,50,50,101,50,50,50,50,50,123,50,50,50,50,50,]),'function_call':([30,31,43,55,56,60,61,62,80,81,93,99,104,130,141,142,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'type_spec':([38,118,135,163,],[65,137,145,165,]),'array_type':([38,118,135,163,],[71,71,71,71,]),'param_list':([40,],[74,]),'param':([40,117,],[75,136,]),'relop':([45,],[80,]),'addop':([45,120,],[81,81,]),'mulop':([48,121,],[93,93,]),'expression_list':([60,62,99,],[105,109,124,]),'function_block':([151,],[155,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON block PERIOD','program',5,'p_program','parser.py',43),
  ('block -> declarations compound_statement','block',2,'p_block','parser.py',48),
  ('declarations -> VAR var_declarations','declarations',2,'p_declarations','parser.py',52),
  ('declarations -> function_declaration','declarations',1,'p_declarations','parser.py',53),
  ('declarations -> empty','declarations',1,'p_declarations','parser.py',54),
  ('function_block -> VAR var_declarations compound_statement','function_block',3,'p_function_block','parser.py',63),
  ('function_block -> compound_statement','function_block',1,'p_function_block','parser.py',64),
  ('declaration -> VAR var_declarations','declaration',2,'p_declaration','parser.py',74),
  ('declaration -> function_declaration','declaration',1,'p_declaration','parser.py',75),
  ('var_declarations -> var_declarations var_declaration','var_declarations',2,'p_var_declarations','parser.py',81),
  ('var_declarations -> var_declaration','var_declarations',1,'p_var_declarations','parser.py',82),
  ('var_declaration -> id_list COLON type_spec SEMICOLON','var_declaration',4,'p_var_declaration','parser.py',91),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','parser.py',101),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',102),
  ('type_spec -> INTEGER_TYPE','type_spec',1,'p_type_spec','parser.py',111),
  ('type_spec -> REAL_TYPE','type_spec',1,'p_type_spec','parser.py',112),
  ('type_spec -> BOOLEAN','type_spec',1,'p_type_spec','parser.py',113),
  ('type_spec -> STRING_TYPE','type_spec',1,'p_type_spec','parser.py',114),
  ('type_spec -> CHAR_TYPE','type_spec',1,'p_type_spec','parser.py',115),
  ('type_spec -> array_type','type_spec',1,'p_type_spec','parser.py',116),
  ('array_type -> ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_spec','array_type',9,'p_array_type','parser.py',125),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','parser.py',130),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','parser.py',135),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',136),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',149),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',150),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',151),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',152),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',153),
  ('statement -> procedure_call_statement','statement',1,'p_statement','parser.py',154),
  ('statement -> halt_statement','statement',1,'p_statement','parser.py',155),
  ('statement -> empty','statement',1,'p_statement','parser.py',156),
  ('assignment_statement -> variable ASSIGN expression','assignment_statement',3,'p_assignment_statement','parser.py',161),
  ('variable -> ID','variable',1,'p_variable','parser.py',165),
  ('variable -> ID LBRACKET expression RBRACKET','variable',4,'p_variable','parser.py',166),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','parser.py',175),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','parser.py',176),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','parser.py',185),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','parser.py',190),
  ('for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','parser.py',191),
  ('procedure_call_statement -> ID LPAREN expression_list RPAREN','procedure_call_statement',4,'p_procedure_call_statement','parser.py',197),
  ('procedure_call_statement -> ID LPAREN RPAREN','procedure_call_statement',3,'p_procedure_call_statement','parser.py',198),
  ('procedure_call_statement -> WRITELN LPAREN expression_list RPAREN','procedure_call_statement',4,'p_procedure_call_statement','parser.py',199),
  ('procedure_call_statement -> WRITELN LPAREN RPAREN','procedure_call_statement',3,'p_procedure_call_statement','parser.py',200),
  ('procedure_call_statement -> READLN LPAREN variable RPAREN','procedure_call_statement',4,'p_procedure_call_statement','parser.py',201),
  ('procedure_call_statement -> READLN LPAREN RPAREN','procedure_call_statement',3,'p_procedure_call_statement','parser.py',202),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',218),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',219),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',230),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','parser.py',231),
  ('relop -> EQ','relop',1,'p_relop','parser.py',239),
  ('relop -> NEQ','relop',1,'p_relop','parser.py',240),
  ('relop -> LT','relop',1,'p_relop','parser.py',241),
  ('relop -> LE','relop',1,'p_relop','parser.py',242),
  ('relop -> GT','relop',1,'p_relop','parser.py',243),
  ('relop -> GE','relop',1,'p_relop','parser.py',244),
  ('relop -> IN','relop',1,'p_relop','parser.py',245),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','parser.py',250),
  ('simple_expression -> simple_expression addop term','simple_expression',3,'p_simple_expression','parser.py',251),
  ('addop -> PLUS','addop',1,'p_addop','parser.py',259),
  ('addop -> MINUS','addop',1,'p_addop','parser.py',260),
  ('addop -> OR','addop',1,'p_addop','parser.py',261),
  ('term -> factor','term',1,'p_term','parser.py',266),
  ('term -> term mulop factor','term',3,'p_term','parser.py',267),
  ('mulop -> TIMES','mulop',1,'p_mulop','parser.py',275),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','parser.py',276),
  ('mulop -> DIV','mulop',1,'p_mulop','parser.py',277),
  ('mulop -> MOD','mulop',1,'p_mulop','parser.py',278),
  ('mulop -> AND','mulop',1,'p_mulop','parser.py',279),
  ('factor -> variable','factor',1,'p_factor','parser.py',284),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',285),
  ('factor -> REAL','factor',1,'p_factor','parser.py',286),
  ('factor -> STRING','factor',1,'p_factor','parser.py',287),
  ('factor -> TRUE','factor',1,'p_factor','parser.py',288),
  ('factor -> FALSE','factor',1,'p_factor','parser.py',289),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',290),
  ('factor -> NOT factor','factor',2,'p_factor','parser.py',291),
  ('factor -> function_call','factor',1,'p_factor','parser.py',292),
  ('expression -> variable COLON INTEGER','expression',3,'p_formatted_expression','parser.py',310),
  ('expression -> variable COLON INTEGER COLON INTEGER','expression',5,'p_formatted_expression','parser.py',311),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','parser.py',320),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','parser.py',321),
  ('function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type_spec SEMICOLON function_block SEMICOLON','function_declaration',10,'p_function_declaration','parser.py',329),
  ('param_list -> param_list SEMICOLON param','param_list',3,'p_param_list','parser.py',334),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',335),
  ('param -> id_list COLON type_spec','param',3,'p_param','parser.py',343),
  ('halt_statement -> HALT SEMICOLON','halt_statement',2,'p_halt_statement','parser.py',349),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',355),
]
