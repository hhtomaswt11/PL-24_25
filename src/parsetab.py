
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AND APOSTROPHE ARRAY ARRAY ASSIGN BEGIN BEGIN BOOLEAN BOOLEAN CASE CASE CHAR_TYPE CHAR_TYPE COLON COMMA COMMENT CONST CONST DIV DIV DIVIDE DO DO DOWNTO DOWNTO ELSE ELSE END END EQ FALSE FALSE FILE FILE FOR FOR FUNCTION FUNCTION GE GOTO GOTO GT HALT HALT ID IF IF IN IN INTEGER INTEGER_TYPE INTEGER_TYPE LABEL LABEL LBRACKET LE LPAREN LT MINUS MOD MOD NEQ NIL NIL NOT NOT OF OF OR OR PACKED PACKED PERIOD PLUS PROCEDURE PROCEDURE PROGRAM PROGRAM RBRACKET READ READ READLN READLN REAL REAL_TYPE REAL_TYPE RECORD RECORD REPEAT REPEAT RPAREN SEMICOLON SET SET STRING STRING_TYPE STRING_TYPE THEN THEN TIMES TO TO TRUE TRUE TYPE TYPE UNTIL UNTIL VAR VAR WHILE WHILE WITH WITH WRITE WRITE WRITELN WRITELNprogram : PROGRAM ID SEMICOLON block PERIODblock : declarations compound_statementdeclarations : VAR var_declarations\n                        | function_declaration\n                        | emptyfunction_block : VAR var_declarations compound_statement\n                        | compound_statementdeclaration : VAR var_declarations\n                    | function_declarationvar_declarations : var_declarations var_declaration\n                           | var_declarationvar_declaration : id_list COLON type_spec SEMICOLONid_list : id_list COMMA ID\n                  | IDtype_spec : INTEGER_TYPE\n                     | REAL_TYPE\n                     | BOOLEAN\n                     | STRING_TYPE\n                     | CHAR_TYPE\n                     | array_typearray_type : ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_speccompound_statement : BEGIN statement_list ENDstatement_list : statement_list SEMICOLON statement\n                         | statementstatement : compound_statement\n                     | assignment_statement\n                     | if_statement\n                     | while_statement\n                     | for_statement\n                     | procedure_call_statement\n                     | halt_statement\n                     | emptyassignment_statement : variable ASSIGN expressionvariable : ID\n                | ID LBRACKET expression RBRACKEThalt_statement : HALT SEMICOLONif_statement : IF expression THEN statement\n                        | IF expression THEN statement ELSE statementwhile_statement : WHILE expression DO statementfor_statement : FOR ID ASSIGN expression TO expression DO statement\n                        | FOR ID ASSIGN expression DOWNTO expression DO statementprocedure_call_statement : ID LPAREN expression_list RPAREN\n                                   | ID LPAREN RPAREN\n                                   | WRITELN LPAREN expression_list RPAREN\n                                   | WRITELN LPAREN RPAREN\n                                   | READLN LPAREN variable RPAREN\n                                   | READLN LPAREN RPARENexpression_list : expression_list COMMA expression\n                       | expressionexpression : simple_expression\n                     | simple_expression relop simple_expressionrelop : EQ\n                | NEQ\n                | LT\n                | LE\n                | GT\n                | GE\n                | INsimple_expression : term\n                            | simple_expression addop termaddop : PLUS\n                | MINUS\n                | ORterm : factor\n                | term mulop factormulop : TIMES\n                | DIVIDE\n                | DIV\n                | MOD\n                | ANDfactor : variable\n                 | INTEGER\n                 | REAL\n                 | STRING\n                 | TRUE\n                 | FALSE\n                 | LPAREN expression RPAREN\n                 | NOT factor\n                 | function_callexpression : variable COLON INTEGER\n                    | variable COLON INTEGER COLON INTEGERfunction_call : ID LPAREN expression_list RPAREN\n                        | ID LPAREN RPARENfunction_declaration : FUNCTION ID LPAREN param_list RPAREN COLON type_spec SEMICOLON function_block SEMICOLONparam_list : param_list SEMICOLON param\n                    | paramparam : id_list COLON type_specempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,11,],[0,-1,]),'ID':([2,7,10,13,14,15,30,31,32,37,39,40,42,43,55,56,60,61,62,63,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,103,104,114,117,130,138,141,142,152,153,156,162,],[3,17,18,33,17,-11,49,49,59,-10,73,17,33,49,49,49,49,49,49,113,33,49,49,-52,-53,-54,-55,-56,-57,-58,-61,-62,-63,49,-66,-67,-68,-69,-70,49,33,49,-12,17,49,33,49,49,33,33,17,17,]),'SEMICOLON':([3,13,19,20,21,22,23,24,25,26,27,28,36,41,42,45,46,47,48,49,50,51,52,53,54,57,64,65,66,67,68,69,70,71,74,75,77,78,79,101,102,103,106,110,112,119,120,121,122,123,125,126,127,129,131,132,133,136,137,138,140,145,146,147,152,153,155,157,158,159,164,165,],[4,-88,42,-24,-25,-26,-27,-28,-29,-30,-31,-32,64,-22,-88,-50,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-36,114,-15,-16,-17,-18,-19,-20,117,-86,-23,-33,-88,-78,-71,-88,-43,-45,-47,-37,-51,-60,-80,-65,-83,-77,-39,-42,-35,-44,-46,-85,-87,-88,-82,151,-38,-81,-88,-88,161,-7,-40,-41,-6,-21,]),'VAR':([4,151,],[7,156,]),'FUNCTION':([4,],[10,]),'BEGIN':([4,6,8,9,13,14,15,37,42,79,103,114,138,151,152,153,161,162,],[-88,13,-4,-5,13,-3,-11,-10,13,13,13,-12,13,13,13,13,-84,13,]),'PERIOD':([5,12,41,134,144,],[11,-2,-22,144,150,]),'IF':([13,42,79,103,138,152,153,],[30,30,30,30,30,30,30,]),'WHILE':([13,42,79,103,138,152,153,],[31,31,31,31,31,31,31,]),'FOR':([13,42,79,103,138,152,153,],[32,32,32,32,32,32,32,]),'WRITELN':([13,42,79,103,138,152,153,],[34,34,34,34,34,34,34,]),'READLN':([13,42,79,103,138,152,153,],[35,35,35,35,35,35,35,]),'HALT':([13,42,79,103,138,152,153,],[36,36,36,36,36,36,36,]),'END':([13,19,20,21,22,23,24,25,26,27,28,41,42,45,46,47,48,49,50,51,52,53,54,57,64,77,78,79,101,102,103,106,110,112,119,120,121,122,123,125,126,127,129,131,132,133,138,140,146,147,152,153,158,159,],[-88,41,-24,-25,-26,-27,-28,-29,-30,-31,-32,-22,-88,-50,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-36,-23,-33,-88,-78,-71,-88,-43,-45,-47,-37,-51,-60,-80,-65,-83,-77,-39,-42,-35,-44,-46,-88,-82,-38,-81,-88,-88,-40,-41,]),'COLON':([16,17,46,49,73,76,116,122,131,],[38,-14,92,-34,-13,118,135,139,-35,]),'COMMA':([16,17,45,46,47,48,49,50,51,52,53,54,57,73,76,101,102,105,107,109,120,121,122,123,124,125,126,131,140,143,147,],[39,-14,-50,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-13,39,-78,-71,130,-49,130,-51,-60,-80,-65,130,-83,-77,-35,-82,-48,-81,]),'LPAREN':([18,30,31,33,34,35,43,49,55,56,60,61,62,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,104,130,141,142,],[40,55,55,60,62,63,55,99,55,55,55,55,55,55,55,-52,-53,-54,-55,-56,-57,-58,-61,-62,-63,55,-66,-67,-68,-69,-70,55,55,55,55,55,]),'ELSE':([21,22,23,24,25,26,27,28,41,45,46,47,48,49,50,51,52,53,54,57,64,78,79,101,102,103,106,110,112,119,120,121,122,123,125,126,127,129,131,132,133,138,140,146,147,152,153,158,159,],[-25,-26,-27,-28,-29,-30,-31,-32,-22,-50,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-36,-33,-88,-78,-71,-88,-43,-45,-47,138,-51,-60,-80,-65,-83,-77,-39,-42,-35,-44,-46,-88,-82,-38,-81,-88,-88,-40,-41,]),'ASSIGN':([29,33,59,131,],[43,-34,104,-35,]),'INTEGER':([30,31,43,55,56,60,61,62,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,115,130,139,141,142,150,],[47,47,47,47,47,47,47,47,47,47,-52,-53,-54,-55,-56,-57,-58,-61,-62,-63,122,47,-66,-67,-68,-69,-70,47,47,134,47,147,47,47,154,]),'REAL':([30,31,43,55,56,60,61,62,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,104,130,141,142,],[51,51,51,51,51,51,51,51,51,51,-52,-53,-54,-55,-56,-57,-58,-61,-62,-63,51,-66,-67,-68,-69,-70,51,51,51,51,51,]),'STRING':([30,31,43,55,56,60,61,62,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,104,130,141,142,],[52,52,52,52,52,52,52,52,52,52,-52,-53,-54,-55,-56,-57,-58,-61,-62,-63,52,-66,-67,-68,-69,-70,52,52,52,52,52,]),'TRUE':([30,31,43,55,56,60,61,62,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,104,130,141,142,],[53,53,53,53,53,53,53,53,53,53,-52,-53,-54,-55,-56,-57,-58,-61,-62,-63,53,-66,-67,-68,-69,-70,53,53,53,53,53,]),'FALSE':([30,31,43,55,56,60,61,62,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,104,130,141,142,],[54,54,54,54,54,54,54,54,54,54,-52,-53,-54,-55,-56,-57,-58,-61,-62,-63,54,-66,-67,-68,-69,-70,54,54,54,54,54,]),'NOT':([30,31,43,55,56,60,61,62,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,104,130,141,142,],[56,56,56,56,56,56,56,56,56,56,-52,-53,-54,-55,-56,-57,-58,-61,-62,-63,56,-66,-67,-68,-69,-70,56,56,56,56,56,]),'LBRACKET':([33,49,72,113,],[61,61,115,61,]),'INTEGER_TYPE':([38,118,135,163,],[66,66,66,66,]),'REAL_TYPE':([38,118,135,163,],[67,67,67,67,]),'BOOLEAN':([38,118,135,163,],[68,68,68,68,]),'STRING_TYPE':([38,118,135,163,],[69,69,69,69,]),'CHAR_TYPE':([38,118,135,163,],[70,70,70,70,]),'ARRAY':([38,118,135,163,],[72,72,72,72,]),'THEN':([44,45,46,47,48,49,50,51,52,53,54,57,101,102,120,121,122,123,125,126,131,140,147,],[79,-50,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-78,-71,-51,-60,-80,-65,-83,-77,-35,-82,-81,]),'DO':([45,46,47,48,49,50,51,52,53,54,57,58,101,102,120,121,122,123,125,126,131,140,147,148,149,],[-50,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,103,-78,-71,-51,-60,-80,-65,-83,-77,-35,-82,-81,152,153,]),'RPAREN':([45,46,47,48,49,50,51,52,53,54,57,60,62,63,66,67,68,69,70,71,74,75,99,100,101,102,105,107,109,111,113,120,121,122,123,124,125,126,131,136,137,140,143,147,165,],[-50,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,106,110,112,-15,-16,-17,-18,-19,-20,116,-86,125,126,-78,-71,129,-49,132,133,-34,-51,-60,-80,-65,140,-83,-77,-35,-85,-87,-82,-48,-81,-21,]),'RBRACKET':([45,46,47,48,49,50,51,52,53,54,57,101,102,108,120,121,122,123,125,126,131,140,147,154,],[-50,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-78,-71,131,-51,-60,-80,-65,-83,-77,-35,-82,-81,160,]),'TO':([45,46,47,48,49,50,51,52,53,54,57,101,102,120,121,122,123,125,126,128,131,140,147,],[-50,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-78,-71,-51,-60,-80,-65,-83,-77,141,-35,-82,-81,]),'DOWNTO':([45,46,47,48,49,50,51,52,53,54,57,101,102,120,121,122,123,125,126,128,131,140,147,],[-50,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-78,-71,-51,-60,-80,-65,-83,-77,142,-35,-82,-81,]),'EQ':([45,46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[82,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-78,-71,-60,-65,-83,-77,-35,-82,]),'NEQ':([45,46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[83,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-78,-71,-60,-65,-83,-77,-35,-82,]),'LT':([45,46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[84,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-78,-71,-60,-65,-83,-77,-35,-82,]),'LE':([45,46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[85,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-78,-71,-60,-65,-83,-77,-35,-82,]),'GT':([45,46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[86,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-78,-71,-60,-65,-83,-77,-35,-82,]),'GE':([45,46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[87,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-78,-71,-60,-65,-83,-77,-35,-82,]),'IN':([45,46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[88,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-78,-71,-60,-65,-83,-77,-35,-82,]),'PLUS':([45,46,47,48,49,50,51,52,53,54,57,101,102,120,121,123,125,126,131,140,],[89,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-78,-71,89,-60,-65,-83,-77,-35,-82,]),'MINUS':([45,46,47,48,49,50,51,52,53,54,57,101,102,120,121,123,125,126,131,140,],[90,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-78,-71,90,-60,-65,-83,-77,-35,-82,]),'OR':([45,46,47,48,49,50,51,52,53,54,57,101,102,120,121,123,125,126,131,140,],[91,-71,-72,-59,-34,-64,-73,-74,-75,-76,-79,-78,-71,91,-60,-65,-83,-77,-35,-82,]),'TIMES':([46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[-71,-72,94,-34,-64,-73,-74,-75,-76,-79,-78,-71,94,-65,-83,-77,-35,-82,]),'DIVIDE':([46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[-71,-72,95,-34,-64,-73,-74,-75,-76,-79,-78,-71,95,-65,-83,-77,-35,-82,]),'DIV':([46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[-71,-72,96,-34,-64,-73,-74,-75,-76,-79,-78,-71,96,-65,-83,-77,-35,-82,]),'MOD':([46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[-71,-72,97,-34,-64,-73,-74,-75,-76,-79,-78,-71,97,-65,-83,-77,-35,-82,]),'AND':([46,47,48,49,50,51,52,53,54,57,101,102,121,123,125,126,131,140,],[-71,-72,98,-34,-64,-73,-74,-75,-76,-79,-78,-71,98,-65,-83,-77,-35,-82,]),'OF':([160,],[163,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,],[5,]),'declarations':([4,],[6,]),'function_declaration':([4,],[8,]),'empty':([4,13,42,79,103,138,152,153,],[9,28,28,28,28,28,28,28,]),'compound_statement':([6,13,42,79,103,138,151,152,153,162,],[12,21,21,21,21,21,157,21,21,164,]),'var_declarations':([7,156,],[14,162,]),'var_declaration':([7,14,156,162,],[15,37,15,37,]),'id_list':([7,14,40,117,156,162,],[16,16,76,76,16,16,]),'statement_list':([13,],[19,]),'statement':([13,42,79,103,138,152,153,],[20,77,119,127,146,158,159,]),'assignment_statement':([13,42,79,103,138,152,153,],[22,22,22,22,22,22,22,]),'if_statement':([13,42,79,103,138,152,153,],[23,23,23,23,23,23,23,]),'while_statement':([13,42,79,103,138,152,153,],[24,24,24,24,24,24,24,]),'for_statement':([13,42,79,103,138,152,153,],[25,25,25,25,25,25,25,]),'procedure_call_statement':([13,42,79,103,138,152,153,],[26,26,26,26,26,26,26,]),'halt_statement':([13,42,79,103,138,152,153,],[27,27,27,27,27,27,27,]),'variable':([13,30,31,42,43,55,56,60,61,62,63,79,80,81,93,99,103,104,130,138,141,142,152,153,],[29,46,46,29,46,46,102,46,46,46,111,29,102,102,102,46,29,46,46,29,46,46,29,29,]),'expression':([30,31,43,55,60,61,62,99,104,130,141,142,],[44,58,78,100,107,108,107,107,128,143,148,149,]),'simple_expression':([30,31,43,55,60,61,62,80,99,104,130,141,142,],[45,45,45,45,45,45,45,120,45,45,45,45,45,]),'term':([30,31,43,55,60,61,62,80,81,99,104,130,141,142,],[48,48,48,48,48,48,48,48,121,48,48,48,48,48,]),'factor':([30,31,43,55,56,60,61,62,80,81,93,99,104,130,141,142,],[50,50,50,50,101,50,50,50,50,50,123,50,50,50,50,50,]),'function_call':([30,31,43,55,56,60,61,62,80,81,93,99,104,130,141,142,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'type_spec':([38,118,135,163,],[65,137,145,165,]),'array_type':([38,118,135,163,],[71,71,71,71,]),'param_list':([40,],[74,]),'param':([40,117,],[75,136,]),'relop':([45,],[80,]),'addop':([45,120,],[81,81,]),'mulop':([48,121,],[93,93,]),'expression_list':([60,62,99,],[105,109,124,]),'function_block':([151,],[155,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON block PERIOD','program',5,'p_program','parser.py',42),
  ('block -> declarations compound_statement','block',2,'p_block','parser.py',47),
  ('declarations -> VAR var_declarations','declarations',2,'p_declarations','parser.py',51),
  ('declarations -> function_declaration','declarations',1,'p_declarations','parser.py',52),
  ('declarations -> empty','declarations',1,'p_declarations','parser.py',53),
  ('function_block -> VAR var_declarations compound_statement','function_block',3,'p_function_block','parser.py',62),
  ('function_block -> compound_statement','function_block',1,'p_function_block','parser.py',63),
  ('declaration -> VAR var_declarations','declaration',2,'p_declaration','parser.py',73),
  ('declaration -> function_declaration','declaration',1,'p_declaration','parser.py',74),
  ('var_declarations -> var_declarations var_declaration','var_declarations',2,'p_var_declarations','parser.py',80),
  ('var_declarations -> var_declaration','var_declarations',1,'p_var_declarations','parser.py',81),
  ('var_declaration -> id_list COLON type_spec SEMICOLON','var_declaration',4,'p_var_declaration','parser.py',90),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','parser.py',100),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',101),
  ('type_spec -> INTEGER_TYPE','type_spec',1,'p_type_spec','parser.py',110),
  ('type_spec -> REAL_TYPE','type_spec',1,'p_type_spec','parser.py',111),
  ('type_spec -> BOOLEAN','type_spec',1,'p_type_spec','parser.py',112),
  ('type_spec -> STRING_TYPE','type_spec',1,'p_type_spec','parser.py',113),
  ('type_spec -> CHAR_TYPE','type_spec',1,'p_type_spec','parser.py',114),
  ('type_spec -> array_type','type_spec',1,'p_type_spec','parser.py',115),
  ('array_type -> ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_spec','array_type',9,'p_array_type','parser.py',124),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','parser.py',129),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','parser.py',134),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',135),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',148),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',149),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',150),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',151),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',152),
  ('statement -> procedure_call_statement','statement',1,'p_statement','parser.py',153),
  ('statement -> halt_statement','statement',1,'p_statement','parser.py',154),
  ('statement -> empty','statement',1,'p_statement','parser.py',155),
  ('assignment_statement -> variable ASSIGN expression','assignment_statement',3,'p_assignment_statement','parser.py',160),
  ('variable -> ID','variable',1,'p_variable','parser.py',164),
  ('variable -> ID LBRACKET expression RBRACKET','variable',4,'p_variable','parser.py',165),
  ('halt_statement -> HALT SEMICOLON','halt_statement',2,'p_halt_statement','parser.py',173),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','parser.py',178),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','parser.py',179),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','parser.py',187),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','parser.py',192),
  ('for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','parser.py',193),
  ('procedure_call_statement -> ID LPAREN expression_list RPAREN','procedure_call_statement',4,'p_procedure_call_statement','parser.py',199),
  ('procedure_call_statement -> ID LPAREN RPAREN','procedure_call_statement',3,'p_procedure_call_statement','parser.py',200),
  ('procedure_call_statement -> WRITELN LPAREN expression_list RPAREN','procedure_call_statement',4,'p_procedure_call_statement','parser.py',201),
  ('procedure_call_statement -> WRITELN LPAREN RPAREN','procedure_call_statement',3,'p_procedure_call_statement','parser.py',202),
  ('procedure_call_statement -> READLN LPAREN variable RPAREN','procedure_call_statement',4,'p_procedure_call_statement','parser.py',203),
  ('procedure_call_statement -> READLN LPAREN RPAREN','procedure_call_statement',3,'p_procedure_call_statement','parser.py',204),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',220),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',221),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',232),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','parser.py',233),
  ('relop -> EQ','relop',1,'p_relop','parser.py',241),
  ('relop -> NEQ','relop',1,'p_relop','parser.py',242),
  ('relop -> LT','relop',1,'p_relop','parser.py',243),
  ('relop -> LE','relop',1,'p_relop','parser.py',244),
  ('relop -> GT','relop',1,'p_relop','parser.py',245),
  ('relop -> GE','relop',1,'p_relop','parser.py',246),
  ('relop -> IN','relop',1,'p_relop','parser.py',247),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','parser.py',252),
  ('simple_expression -> simple_expression addop term','simple_expression',3,'p_simple_expression','parser.py',253),
  ('addop -> PLUS','addop',1,'p_addop','parser.py',261),
  ('addop -> MINUS','addop',1,'p_addop','parser.py',262),
  ('addop -> OR','addop',1,'p_addop','parser.py',263),
  ('term -> factor','term',1,'p_term','parser.py',268),
  ('term -> term mulop factor','term',3,'p_term','parser.py',269),
  ('mulop -> TIMES','mulop',1,'p_mulop','parser.py',277),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','parser.py',278),
  ('mulop -> DIV','mulop',1,'p_mulop','parser.py',279),
  ('mulop -> MOD','mulop',1,'p_mulop','parser.py',280),
  ('mulop -> AND','mulop',1,'p_mulop','parser.py',281),
  ('factor -> variable','factor',1,'p_factor','parser.py',286),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',287),
  ('factor -> REAL','factor',1,'p_factor','parser.py',288),
  ('factor -> STRING','factor',1,'p_factor','parser.py',289),
  ('factor -> TRUE','factor',1,'p_factor','parser.py',290),
  ('factor -> FALSE','factor',1,'p_factor','parser.py',291),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',292),
  ('factor -> NOT factor','factor',2,'p_factor','parser.py',293),
  ('factor -> function_call','factor',1,'p_factor','parser.py',294),
  ('expression -> variable COLON INTEGER','expression',3,'p_formatted_expression','parser.py',312),
  ('expression -> variable COLON INTEGER COLON INTEGER','expression',5,'p_formatted_expression','parser.py',313),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','parser.py',322),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','parser.py',323),
  ('function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type_spec SEMICOLON function_block SEMICOLON','function_declaration',10,'p_function_declaration','parser.py',331),
  ('param_list -> param_list SEMICOLON param','param_list',3,'p_param_list','parser.py',336),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',337),
  ('param -> id_list COLON type_spec','param',3,'p_param','parser.py',345),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',350),
]
