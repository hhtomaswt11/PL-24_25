
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND APOSTROPHE ARRAY ASSIGN BEGIN BOOLEAN CASE CHAR_TYPE COLON COMMA COMMENT CONST DIV DIVIDE DO DOWNTO ELSE END EQ FALSE FILE FOR FUNCTION GE GOTO GT HALT ID IF IN INTEGER INTEGER_TYPE LABEL LBRACKET LE LENGTH LPAREN LT MINUS MOD NEQ NIL NOT OF OR PACKED PERIOD PLUS PROCEDURE PROGRAM RBRACKET READ READLN REAL REAL_TYPE RECORD REPEAT RETURN RPAREN SEMICOLON SET STRING STRING_TYPE THEN TIMES TO TRUE TYPE UNTIL VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON block PERIODblock : declarations compound_statementdeclarations : declaration declarations\n                        | emptydeclaration : VAR var_declarations\n                    | function_declaration\n                    | procedure_declarationfunction_block : declarations compound_statement\n                          | compound_statementfunction_declaration : FUNCTION ID LPAREN param_list RPAREN COLON type_spec SEMICOLON function_block SEMICOLON\n                                | FUNCTION ID COLON type_spec SEMICOLON function_block SEMICOLONprocedure_declaration : PROCEDURE ID LPAREN param_list RPAREN SEMICOLON function_block SEMICOLON\n                                 | PROCEDURE ID SEMICOLON function_block SEMICOLONvar_declarations : var_declarations var_declaration\n                           | var_declarationvar_declaration : id_list COLON type_spec SEMICOLONid_list : id_list COMMA ID\n                  | IDtype_spec : INTEGER_TYPE\n                     | REAL_TYPE\n                     | BOOLEAN\n                     | STRING_TYPE\n                     | CHAR_TYPE\n                     | array_typearray_type : ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_speccompound_statement : BEGIN statement_list ENDstatement_list : statement_list SEMICOLON statement\n                         | statementstatement : compound_statement\n                     | assignment_statement\n                     | if_statement\n                     | while_statement\n                     | for_statement\n                     | procedure_call_statement\n                     | function_call_statement\n                     | halt_statement\n                     | emptyassignment_statement : variable ASSIGN expression\n                                | ID ASSIGN expressionvariable : ID\n                | ID LBRACKET expression RBRACKETif_statement : IF expression THEN statement\n                        | IF expression THEN statement ELSE statementwhile_statement : WHILE expression DO statementfor_statement : FOR ID ASSIGN expression TO expression DO statement\n                        | FOR ID ASSIGN expression DOWNTO expression DO statementprocedure_call_statement : ID LPAREN expression_list RPAREN\n                                   | ID LPAREN RPAREN\n                                   | WRITELN LPAREN expression_list RPAREN\n                                   | WRITELN LPAREN RPAREN\n                                   | READLN LPAREN variable RPAREN\n                                   | READLN LPAREN RPARENfunction_call_statement : function_callexpression_list : expression_list COMMA expression\n                           | expressionparam_list : param_list SEMICOLON param\n                      | param\n                      | emptyparam : id_list COLON type_spec\n                 | VAR id_list COLON type_specexpression : simple_expression\n                     | simple_expression relop simple_expressionrelop : EQ\n                | NEQ\n                | LT\n                | LE\n                | GT\n                | GE\n                | INsimple_expression : term\n                            | simple_expression addop termaddop : PLUS\n                | MINUS\n                | ORterm : factor\n                | term mulop factormulop : TIMES\n                | DIVIDE\n                | DIV\n                | MOD\n                | ANDfactor : string_access\n                 | variable\n                 | INTEGER\n                 | REAL\n                 | STRING\n                 | TRUE\n                 | FALSE\n                 | LPAREN expression RPAREN\n                 | NOT factor\n                 | function_callstring_access : ID LBRACKET expression RBRACKETexpression : variable COLON INTEGER\n                    | variable COLON INTEGER COLON INTEGERfunction_call : ID LPAREN expression_list RPAREN\n                        | ID LPAREN RPAREN\n                        | LENGTH LPAREN expression RPARENhalt_statement : HALTempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,14,],[0,-1,]),'ID':([2,9,12,13,16,18,19,37,38,39,45,47,48,50,53,54,55,56,57,70,71,75,76,77,91,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,130,131,138,141,149,160,174,179,180,194,195,],[3,21,22,23,36,21,-15,63,63,74,-14,86,21,21,36,63,63,63,63,63,129,63,136,63,21,36,129,129,-63,-64,-65,-66,-67,-68,-69,-72,-73,-74,129,-77,-78,-79,-80,-81,63,63,36,63,-16,21,63,63,36,63,63,36,36,]),'SEMICOLON':([3,16,23,24,25,26,27,28,29,30,31,32,33,34,42,43,48,50,52,53,59,60,61,62,63,64,65,66,67,68,69,72,78,79,80,81,82,83,84,87,88,89,92,93,94,96,97,98,99,101,104,127,128,129,130,133,135,145,147,148,151,152,153,154,155,158,159,161,163,164,165,168,169,171,174,176,177,182,183,185,186,187,188,194,195,197,198,199,203,],[4,-99,51,53,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-53,-98,-99,-99,-26,-99,-61,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,138,-19,-20,-21,-22,-23,-24,141,-57,-58,144,141,146,-9,-27,-38,-39,-48,-99,-90,-83,-40,-99,-50,-52,172,-8,-47,-42,-62,-71,-93,-76,-96,-89,-44,-49,-51,-97,-56,-59,184,-99,-41,-95,192,-60,193,-43,-94,-41,-99,-99,201,-45,-46,-25,]),'VAR':([4,7,10,11,18,19,45,48,50,51,138,141,144,146,172,184,192,193,201,],[9,9,-6,-7,-5,-15,-14,91,91,9,-16,91,9,-13,9,-11,9,-12,-10,]),'BEGIN':([4,6,7,8,10,11,16,17,18,19,45,51,53,95,104,130,138,144,146,172,174,184,192,193,194,195,201,],[-99,16,-99,-4,-6,-7,16,-3,-5,-15,-14,16,16,16,16,16,-16,16,-13,16,16,-11,16,-12,16,16,-10,]),'FUNCTION':([4,7,10,11,18,19,45,51,138,144,146,172,184,192,193,201,],[12,12,-6,-7,-5,-15,-14,12,-16,12,-13,12,-11,12,-12,-10,]),'PROCEDURE':([4,7,10,11,18,19,45,51,138,144,146,172,184,192,193,201,],[13,13,-6,-7,-5,-15,-14,13,-16,13,-13,13,-11,13,-12,-10,]),'PERIOD':([5,15,52,166,181,],[14,-2,-26,181,191,]),'IF':([16,53,104,130,174,194,195,],[37,37,37,37,37,37,37,]),'WHILE':([16,53,104,130,174,194,195,],[38,38,38,38,38,38,38,]),'FOR':([16,53,104,130,174,194,195,],[39,39,39,39,39,39,39,]),'WRITELN':([16,53,104,130,174,194,195,],[40,40,40,40,40,40,40,]),'READLN':([16,53,104,130,174,194,195,],[41,41,41,41,41,41,41,]),'HALT':([16,53,104,130,174,194,195,],[43,43,43,43,43,43,43,]),'END':([16,24,25,26,27,28,29,30,31,32,33,34,42,43,52,53,59,60,61,62,63,64,65,66,67,68,69,72,97,98,99,101,104,127,128,129,130,133,135,148,151,152,153,154,155,158,159,161,163,164,165,174,176,177,186,187,188,194,195,198,199,],[-99,52,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-53,-98,-26,-99,-61,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,-27,-38,-39,-48,-99,-90,-83,-40,-99,-50,-52,-47,-42,-62,-71,-93,-76,-96,-89,-44,-49,-51,-97,-99,-41,-95,-43,-94,-41,-99,-99,-45,-46,]),'LENGTH':([16,37,38,53,54,55,56,57,70,71,75,77,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,130,131,149,160,174,179,180,194,195,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-63,-64,-65,-66,-67,-68,-69,-72,-73,-74,44,-77,-78,-79,-80,-81,44,44,44,44,44,44,44,44,44,44,44,]),'COLON':([20,21,22,60,63,86,90,140,143,154,176,],[46,-18,49,117,-40,-17,142,167,170,175,-41,]),'COMMA':([20,21,59,60,61,62,63,64,65,66,67,68,69,72,86,90,100,102,127,128,129,132,143,152,153,154,155,157,158,159,165,173,176,177,187,188,],[47,-18,-61,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,-17,47,149,-55,-90,-83,-40,149,47,-62,-71,-93,-76,149,-96,-89,-97,-54,-41,-95,-94,-41,]),'LPAREN':([22,23,36,37,38,40,41,44,54,55,56,57,63,70,71,75,77,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,129,131,149,160,179,180,],[48,50,56,70,70,75,76,77,70,70,70,70,125,70,70,70,70,70,70,-63,-64,-65,-66,-67,-68,-69,-72,-73,-74,70,-77,-78,-79,-80,-81,70,70,125,70,70,70,70,70,]),'ELSE':([26,27,28,29,30,31,32,33,34,42,43,52,59,60,61,62,63,64,65,66,67,68,69,72,98,99,101,104,127,128,129,130,133,135,148,151,152,153,154,155,158,159,161,163,164,165,174,176,177,186,187,188,194,195,198,199,],[-29,-30,-31,-32,-33,-34,-35,-36,-37,-53,-98,-26,-61,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,-38,-39,-48,-99,-90,-83,-40,-99,-50,-52,-47,174,-62,-71,-93,-76,-96,-89,-44,-49,-51,-97,-99,-41,-95,-43,-94,-41,-99,-99,-45,-46,]),'ASSIGN':([35,36,74,150,],[54,55,131,-41,]),'LBRACKET':([36,63,85,129,136,],[57,124,139,160,57,]),'INTEGER':([37,38,54,55,56,57,70,71,75,77,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,131,139,149,160,175,179,180,191,],[61,61,61,61,61,61,61,61,61,61,61,61,-63,-64,-65,-66,-67,-68,-69,-72,-73,-74,154,61,-77,-78,-79,-80,-81,61,61,61,166,61,61,187,61,61,196,]),'REAL':([37,38,54,55,56,57,70,71,75,77,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,131,149,160,179,180,],[66,66,66,66,66,66,66,66,66,66,66,66,-63,-64,-65,-66,-67,-68,-69,-72,-73,-74,66,-77,-78,-79,-80,-81,66,66,66,66,66,66,66,]),'STRING':([37,38,54,55,56,57,70,71,75,77,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,131,149,160,179,180,],[67,67,67,67,67,67,67,67,67,67,67,67,-63,-64,-65,-66,-67,-68,-69,-72,-73,-74,67,-77,-78,-79,-80,-81,67,67,67,67,67,67,67,]),'TRUE':([37,38,54,55,56,57,70,71,75,77,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,131,149,160,179,180,],[68,68,68,68,68,68,68,68,68,68,68,68,-63,-64,-65,-66,-67,-68,-69,-72,-73,-74,68,-77,-78,-79,-80,-81,68,68,68,68,68,68,68,]),'FALSE':([37,38,54,55,56,57,70,71,75,77,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,131,149,160,179,180,],[69,69,69,69,69,69,69,69,69,69,69,69,-63,-64,-65,-66,-67,-68,-69,-72,-73,-74,69,-77,-78,-79,-80,-81,69,69,69,69,69,69,69,]),'NOT':([37,38,54,55,56,57,70,71,75,77,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,131,149,160,179,180,],[71,71,71,71,71,71,71,71,71,71,71,71,-63,-64,-65,-66,-67,-68,-69,-72,-73,-74,71,-77,-78,-79,-80,-81,71,71,71,71,71,71,71,]),'INTEGER_TYPE':([46,49,142,167,170,202,],[79,79,79,79,79,79,]),'REAL_TYPE':([46,49,142,167,170,202,],[80,80,80,80,80,80,]),'BOOLEAN':([46,49,142,167,170,202,],[81,81,81,81,81,81,]),'STRING_TYPE':([46,49,142,167,170,202,],[82,82,82,82,82,82,]),'CHAR_TYPE':([46,49,142,167,170,202,],[83,83,83,83,83,83,]),'ARRAY':([46,49,142,167,170,202,],[85,85,85,85,85,85,]),'RPAREN':([48,50,56,59,60,61,62,63,64,65,66,67,68,69,72,75,76,79,80,81,82,83,84,87,88,89,93,100,102,125,126,127,128,129,132,134,136,137,150,152,153,154,155,157,158,159,165,168,169,173,176,177,183,187,188,203,],[-99,-99,101,-61,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,133,135,-19,-20,-21,-22,-23,-24,140,-57,-58,145,148,-55,158,159,-90,-83,-40,163,164,-40,165,-41,-62,-71,-93,-76,177,-96,-89,-97,-56,-59,-54,-41,-95,-60,-94,-41,-25,]),'THEN':([58,59,60,61,62,63,64,65,66,67,68,69,72,127,128,129,152,153,154,155,158,159,165,176,177,187,188,],[104,-61,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,-62,-71,-93,-76,-96,-89,-97,-41,-95,-94,-41,]),'DO':([59,60,61,62,63,64,65,66,67,68,69,72,73,127,128,129,152,153,154,155,158,159,165,176,177,187,188,189,190,],[-61,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,130,-90,-83,-40,-62,-71,-93,-76,-96,-89,-97,-41,-95,-94,-41,194,195,]),'RBRACKET':([59,60,61,62,63,64,65,66,67,68,69,72,103,127,128,129,152,153,154,155,156,158,159,165,176,177,178,187,188,196,],[-61,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,150,-90,-83,-40,-62,-71,-93,-76,176,-96,-89,-97,-41,-95,188,-94,-41,200,]),'TO':([59,60,61,62,63,64,65,66,67,68,69,72,127,128,129,152,153,154,155,158,159,162,165,176,177,187,188,],[-61,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,-62,-71,-93,-76,-96,-89,179,-97,-41,-95,-94,-41,]),'DOWNTO':([59,60,61,62,63,64,65,66,67,68,69,72,127,128,129,152,153,154,155,158,159,162,165,176,177,187,188,],[-61,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,-62,-71,-93,-76,-96,-89,180,-97,-41,-95,-94,-41,]),'EQ':([59,60,61,62,63,64,65,66,67,68,69,72,127,128,129,153,155,158,159,165,176,177,188,],[107,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,-71,-76,-96,-89,-97,-41,-95,-41,]),'NEQ':([59,60,61,62,63,64,65,66,67,68,69,72,127,128,129,153,155,158,159,165,176,177,188,],[108,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,-71,-76,-96,-89,-97,-41,-95,-41,]),'LT':([59,60,61,62,63,64,65,66,67,68,69,72,127,128,129,153,155,158,159,165,176,177,188,],[109,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,-71,-76,-96,-89,-97,-41,-95,-41,]),'LE':([59,60,61,62,63,64,65,66,67,68,69,72,127,128,129,153,155,158,159,165,176,177,188,],[110,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,-71,-76,-96,-89,-97,-41,-95,-41,]),'GT':([59,60,61,62,63,64,65,66,67,68,69,72,127,128,129,153,155,158,159,165,176,177,188,],[111,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,-71,-76,-96,-89,-97,-41,-95,-41,]),'GE':([59,60,61,62,63,64,65,66,67,68,69,72,127,128,129,153,155,158,159,165,176,177,188,],[112,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,-71,-76,-96,-89,-97,-41,-95,-41,]),'IN':([59,60,61,62,63,64,65,66,67,68,69,72,127,128,129,153,155,158,159,165,176,177,188,],[113,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,-71,-76,-96,-89,-97,-41,-95,-41,]),'PLUS':([59,60,61,62,63,64,65,66,67,68,69,72,127,128,129,152,153,155,158,159,165,176,177,188,],[114,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,114,-71,-76,-96,-89,-97,-41,-95,-41,]),'MINUS':([59,60,61,62,63,64,65,66,67,68,69,72,127,128,129,152,153,155,158,159,165,176,177,188,],[115,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,115,-71,-76,-96,-89,-97,-41,-95,-41,]),'OR':([59,60,61,62,63,64,65,66,67,68,69,72,127,128,129,152,153,155,158,159,165,176,177,188,],[116,-83,-84,-70,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,116,-71,-76,-96,-89,-97,-41,-95,-41,]),'TIMES':([60,61,62,63,64,65,66,67,68,69,72,127,128,129,153,155,158,159,165,176,177,188,],[-83,-84,119,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,119,-76,-96,-89,-97,-41,-95,-41,]),'DIVIDE':([60,61,62,63,64,65,66,67,68,69,72,127,128,129,153,155,158,159,165,176,177,188,],[-83,-84,120,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,120,-76,-96,-89,-97,-41,-95,-41,]),'DIV':([60,61,62,63,64,65,66,67,68,69,72,127,128,129,153,155,158,159,165,176,177,188,],[-83,-84,121,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,121,-76,-96,-89,-97,-41,-95,-41,]),'MOD':([60,61,62,63,64,65,66,67,68,69,72,127,128,129,153,155,158,159,165,176,177,188,],[-83,-84,122,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,122,-76,-96,-89,-97,-41,-95,-41,]),'AND':([60,61,62,63,64,65,66,67,68,69,72,127,128,129,153,155,158,159,165,176,177,188,],[-83,-84,123,-40,-75,-82,-85,-86,-87,-88,-91,-90,-83,-40,123,-76,-96,-89,-97,-41,-95,-41,]),'OF':([200,],[202,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,],[5,]),'declarations':([4,7,51,144,172,192,],[6,17,95,95,95,95,]),'declaration':([4,7,51,144,172,192,],[7,7,7,7,7,7,]),'empty':([4,7,16,48,50,51,53,104,130,144,172,174,192,194,195,],[8,8,34,89,89,8,34,34,34,8,8,34,8,34,34,]),'function_declaration':([4,7,51,144,172,192,],[10,10,10,10,10,10,]),'procedure_declaration':([4,7,51,144,172,192,],[11,11,11,11,11,11,]),'compound_statement':([6,16,51,53,95,104,130,144,172,174,192,194,195,],[15,26,96,26,147,26,26,96,96,26,96,26,26,]),'var_declarations':([9,],[18,]),'var_declaration':([9,18,],[19,45,]),'id_list':([9,18,48,50,91,141,],[20,20,90,90,143,90,]),'statement_list':([16,],[24,]),'statement':([16,53,104,130,174,194,195,],[25,97,151,161,186,198,199,]),'assignment_statement':([16,53,104,130,174,194,195,],[27,27,27,27,27,27,27,]),'if_statement':([16,53,104,130,174,194,195,],[28,28,28,28,28,28,28,]),'while_statement':([16,53,104,130,174,194,195,],[29,29,29,29,29,29,29,]),'for_statement':([16,53,104,130,174,194,195,],[30,30,30,30,30,30,30,]),'procedure_call_statement':([16,53,104,130,174,194,195,],[31,31,31,31,31,31,31,]),'function_call_statement':([16,53,104,130,174,194,195,],[32,32,32,32,32,32,32,]),'halt_statement':([16,53,104,130,174,194,195,],[33,33,33,33,33,33,33,]),'variable':([16,37,38,53,54,55,56,57,70,71,75,76,77,104,105,106,118,124,125,130,131,149,160,174,179,180,194,195,],[35,60,60,35,60,60,60,60,60,128,60,134,60,35,128,128,128,60,60,35,60,60,60,35,60,60,35,35,]),'function_call':([16,37,38,53,54,55,56,57,70,71,75,77,104,105,106,118,124,125,130,131,149,160,174,179,180,194,195,],[42,72,72,42,72,72,72,72,72,72,72,72,42,72,72,72,72,72,42,72,72,72,42,72,72,42,42,]),'expression':([37,38,54,55,56,57,70,75,77,124,125,131,149,160,179,180,],[58,73,98,99,102,103,126,102,137,156,102,162,173,178,189,190,]),'simple_expression':([37,38,54,55,56,57,70,75,77,105,124,125,131,149,160,179,180,],[59,59,59,59,59,59,59,59,59,152,59,59,59,59,59,59,59,]),'term':([37,38,54,55,56,57,70,75,77,105,106,124,125,131,149,160,179,180,],[62,62,62,62,62,62,62,62,62,62,153,62,62,62,62,62,62,62,]),'factor':([37,38,54,55,56,57,70,71,75,77,105,106,118,124,125,131,149,160,179,180,],[64,64,64,64,64,64,64,127,64,64,64,64,155,64,64,64,64,64,64,64,]),'string_access':([37,38,54,55,56,57,70,71,75,77,105,106,118,124,125,131,149,160,179,180,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'type_spec':([46,49,142,167,170,202,],[78,92,169,182,183,203,]),'array_type':([46,49,142,167,170,202,],[84,84,84,84,84,84,]),'param_list':([48,50,],[87,93,]),'param':([48,50,141,],[88,88,168,]),'function_block':([51,144,172,192,],[94,171,185,197,]),'expression_list':([56,75,125,],[100,132,157,]),'relop':([59,],[105,]),'addop':([59,152,],[106,106,]),'mulop':([62,153,],[118,118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON block PERIOD','program',5,'p_program','parser.py',43),
  ('block -> declarations compound_statement','block',2,'p_block','parser.py',48),
  ('declarations -> declaration declarations','declarations',2,'p_declarations','parser.py',52),
  ('declarations -> empty','declarations',1,'p_declarations','parser.py',53),
  ('declaration -> VAR var_declarations','declaration',2,'p_declaration','parser.py',64),
  ('declaration -> function_declaration','declaration',1,'p_declaration','parser.py',65),
  ('declaration -> procedure_declaration','declaration',1,'p_declaration','parser.py',66),
  ('function_block -> declarations compound_statement','function_block',2,'p_function_block','parser.py',75),
  ('function_block -> compound_statement','function_block',1,'p_function_block','parser.py',76),
  ('function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type_spec SEMICOLON function_block SEMICOLON','function_declaration',10,'p_function_declaration','parser.py',85),
  ('function_declaration -> FUNCTION ID COLON type_spec SEMICOLON function_block SEMICOLON','function_declaration',7,'p_function_declaration','parser.py',86),
  ('procedure_declaration -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON function_block SEMICOLON','procedure_declaration',8,'p_procedure_declaration','parser.py',107),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON function_block SEMICOLON','procedure_declaration',5,'p_procedure_declaration','parser.py',108),
  ('var_declarations -> var_declarations var_declaration','var_declarations',2,'p_var_declarations','parser.py',122),
  ('var_declarations -> var_declaration','var_declarations',1,'p_var_declarations','parser.py',123),
  ('var_declaration -> id_list COLON type_spec SEMICOLON','var_declaration',4,'p_var_declaration','parser.py',132),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','parser.py',142),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',143),
  ('type_spec -> INTEGER_TYPE','type_spec',1,'p_type_spec','parser.py',152),
  ('type_spec -> REAL_TYPE','type_spec',1,'p_type_spec','parser.py',153),
  ('type_spec -> BOOLEAN','type_spec',1,'p_type_spec','parser.py',154),
  ('type_spec -> STRING_TYPE','type_spec',1,'p_type_spec','parser.py',155),
  ('type_spec -> CHAR_TYPE','type_spec',1,'p_type_spec','parser.py',156),
  ('type_spec -> array_type','type_spec',1,'p_type_spec','parser.py',157),
  ('array_type -> ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_spec','array_type',9,'p_array_type','parser.py',166),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','parser.py',171),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','parser.py',176),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',177),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',190),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',191),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',192),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',193),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',194),
  ('statement -> procedure_call_statement','statement',1,'p_statement','parser.py',195),
  ('statement -> function_call_statement','statement',1,'p_statement','parser.py',196),
  ('statement -> halt_statement','statement',1,'p_statement','parser.py',197),
  ('statement -> empty','statement',1,'p_statement','parser.py',198),
  ('assignment_statement -> variable ASSIGN expression','assignment_statement',3,'p_assignment_statement','parser.py',203),
  ('assignment_statement -> ID ASSIGN expression','assignment_statement',3,'p_assignment_statement','parser.py',204),
  ('variable -> ID','variable',1,'p_variable','parser.py',218),
  ('variable -> ID LBRACKET expression RBRACKET','variable',4,'p_variable','parser.py',219),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','parser.py',228),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','parser.py',229),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','parser.py',238),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','parser.py',243),
  ('for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','parser.py',244),
  ('procedure_call_statement -> ID LPAREN expression_list RPAREN','procedure_call_statement',4,'p_procedure_call_statement','parser.py',250),
  ('procedure_call_statement -> ID LPAREN RPAREN','procedure_call_statement',3,'p_procedure_call_statement','parser.py',251),
  ('procedure_call_statement -> WRITELN LPAREN expression_list RPAREN','procedure_call_statement',4,'p_procedure_call_statement','parser.py',252),
  ('procedure_call_statement -> WRITELN LPAREN RPAREN','procedure_call_statement',3,'p_procedure_call_statement','parser.py',253),
  ('procedure_call_statement -> READLN LPAREN variable RPAREN','procedure_call_statement',4,'p_procedure_call_statement','parser.py',254),
  ('procedure_call_statement -> READLN LPAREN RPAREN','procedure_call_statement',3,'p_procedure_call_statement','parser.py',255),
  ('function_call_statement -> function_call','function_call_statement',1,'p_function_call_statement','parser.py',272),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',276),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',277),
  ('param_list -> param_list SEMICOLON param','param_list',3,'p_param_list','parser.py',285),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',286),
  ('param_list -> empty','param_list',1,'p_param_list','parser.py',287),
  ('param -> id_list COLON type_spec','param',3,'p_param','parser.py',297),
  ('param -> VAR id_list COLON type_spec','param',4,'p_param','parser.py',298),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',306),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','parser.py',307),
  ('relop -> EQ','relop',1,'p_relop','parser.py',315),
  ('relop -> NEQ','relop',1,'p_relop','parser.py',316),
  ('relop -> LT','relop',1,'p_relop','parser.py',317),
  ('relop -> LE','relop',1,'p_relop','parser.py',318),
  ('relop -> GT','relop',1,'p_relop','parser.py',319),
  ('relop -> GE','relop',1,'p_relop','parser.py',320),
  ('relop -> IN','relop',1,'p_relop','parser.py',321),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','parser.py',326),
  ('simple_expression -> simple_expression addop term','simple_expression',3,'p_simple_expression','parser.py',327),
  ('addop -> PLUS','addop',1,'p_addop','parser.py',335),
  ('addop -> MINUS','addop',1,'p_addop','parser.py',336),
  ('addop -> OR','addop',1,'p_addop','parser.py',337),
  ('term -> factor','term',1,'p_term','parser.py',342),
  ('term -> term mulop factor','term',3,'p_term','parser.py',343),
  ('mulop -> TIMES','mulop',1,'p_mulop','parser.py',351),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','parser.py',352),
  ('mulop -> DIV','mulop',1,'p_mulop','parser.py',353),
  ('mulop -> MOD','mulop',1,'p_mulop','parser.py',354),
  ('mulop -> AND','mulop',1,'p_mulop','parser.py',355),
  ('factor -> string_access','factor',1,'p_factor','parser.py',360),
  ('factor -> variable','factor',1,'p_factor','parser.py',361),
  ('factor -> INTEGER','factor',1,'p_factor','parser.py',362),
  ('factor -> REAL','factor',1,'p_factor','parser.py',363),
  ('factor -> STRING','factor',1,'p_factor','parser.py',364),
  ('factor -> TRUE','factor',1,'p_factor','parser.py',365),
  ('factor -> FALSE','factor',1,'p_factor','parser.py',366),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',367),
  ('factor -> NOT factor','factor',2,'p_factor','parser.py',368),
  ('factor -> function_call','factor',1,'p_factor','parser.py',369),
  ('string_access -> ID LBRACKET expression RBRACKET','string_access',4,'p_string_access','parser.py',388),
  ('expression -> variable COLON INTEGER','expression',3,'p_formatted_expression','parser.py',392),
  ('expression -> variable COLON INTEGER COLON INTEGER','expression',5,'p_formatted_expression','parser.py',393),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','parser.py',402),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','parser.py',403),
  ('function_call -> LENGTH LPAREN expression RPAREN','function_call',4,'p_function_call','parser.py',404),
  ('halt_statement -> HALT','halt_statement',1,'p_halt_statement','parser.py',414),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',420),
]
